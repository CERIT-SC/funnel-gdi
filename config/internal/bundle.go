// Package config Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config/gridengine-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// config/default-config.yaml
// config/htcondor-template.txt
// config/kubernetes-template.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\x39\x92\x7f\xef\x4f\x51\x67\xcd\x60\x32\x80\x24\xcb\x13\xcc\xe2\x46\x80\x1f\x6c\xd9\xe3\xf8\x62\x3b\x3a\x5b\xd9\xdc\x3d\x05\x54\xb3\xa4\xe6\x98\x4d\xf6\x90\x6c\xcb\x8a\x2f\xdf\xfd\x50\x45\x76\xeb\x8f\xe5\xc4\xbb\xeb\x00\x39\xdc\xf8\xc5\x6a\xb2\x58\x2c\xd6\x3f\xfe\x8a\x64\x07\x26\x05\x82\x11\x25\x82\x9d\x41\x28\x10\x44\x1e\xd4\x1d\x82\x47\x77\x87\x0e\xa4\x08\x62\x2a\x3c\xc2\x54\xe4\xb7\x68\x64\xd6\x81\xa3\x3b\xa1\xb4\x98\xea\xb6\xcd\x0f\x61\x6a\x75\x90\xd3\x2e\x4c\x85\x9c\xa3\xeb\xf2\x30\x1f\xac\xc3\x2e\xc8\xa5\x11\xa5\xa5\x4e\xd4\xc2\x07\x95\x77\xa1\xb4\x66\x6e\xe5\x34\x3b\x49\xcc\x9b\xf1\x59\xf6\xa4\x38\xb9\x2d\xab\x3a\x7c\x4d\x0c\x6d\x73\xa1\xbb\x50\x84\xdc\x1a\x69\x5d\x17\xbc\xae\x5d\xd9\x85\x6a\xea\xbb\x30\x77\x4a\xa2\x99\x2b\x83\x5d\x28\x85\xa9\x89\x52\x2c\x7c\x6f\x2a\x42\x5e\x64\xa3\x38\x41\xe2\xf1\x05\x49\xf0\x0e\x4d\x80\x85\x53\x01\x5d\x33\xf5\x2b\xff\x73\xff\x49\x91\xe6\xdd\x7f\x4e\x3d\x5d\xb8\x15\xb3\x5b\x91\x9d\xd2\x84\x1f\x78\x3e\x3f\x84\x0c\xa0\xd7\xa8\x8b\x7e\x6a\x3b\xcf\xb2\x0b\x3b\x9f\xa3\x1b\x66\x00\x1d\xa0\xdf\xca\xcc\x41\xe3\x1d\x6a\x3f\x04\x89\xd3\x7a\xde\x05\x65\x66\xb6\x0b\xe8\x9c\x75\x19\xc0\x05\x75\x0e\xb9\x91\x07\x31\x7b\xe2\xe5\x21\x58\x08\x85\xf2\x50\x89\x50\xf4\xe1\x7c\x06\x58\x56\x61\xd9\x8d\x9d\xc2\x21\x2f\x3d\xa0\x21\x42\x1f\x24\x3a\xd7\xcf\x00\xde\xd5\xa1\xaa\xc3\xef\x4a\xe3\x10\xf6\xf6\xb2\xec\x86\xdd\x27\x4a\xf4\xc6\xfa\xb0\xae\xc8\xdf\x6b\x63\x50\x27\x0f\xa3\xc1\x44\x70\x25\xca\x46\xf9\x85\xf5\x21\xe3\x91\x63\xeb\x02\xd4\x1e\x25\xcc\xac\x83\x37\x93\xc9\x98\x1c\xa1\xac\x8d\xca\x45\x50\xd6\x80\x30\x92\x59\x2e\x70\x0a\x52\xf8\x62\x6a\x85\x93\xcc\x72\x32\x19\xd3\xe8\x21\xfc\xfb\x60\x30\xd8\xc5\xed\x7a\x3c\xda\x64\x46\xc3\xae\xc7\xa3\x38\xea\xb7\xc1\x6f\x69\xd4\x35\xfe\x59\x2b\x47\x26\xf5\x2a\x07\x51\x87\x02\x4d\x68\xe6\x27\x46\x34\x7f\x8a\x96\xa3\xf1\xb9\x87\xda\x93\xfa\x05\x54\xc2\xfb\x85\x8d\xe2\x74\x48\x91\x34\x35\xb9\xde\x2d\x82\xaf\x1d\x92\x02\x2b\x67\x2b\x74\x7a\x09\x0e\x7d\x70\x2a\x0f\x20\xf2\x1c\x7d\xb2\x02\xb9\xbd\x99\xa9\x39\xcc\x94\x46\xe6\xf2\x0a\xfb\xf3\x3e\xe4\x45\x69\x25\xfc\x6d\x30\x80\x19\xab\xb2\x1f\xc9\xfa\xcb\x52\xff\xcc\x64\xc7\x24\xeb\x51\x1d\x8a\x68\x00\xf2\x93\xf7\x1e\xdd\x90\x44\x70\x07\xa9\x0d\x60\x9c\x24\x1c\x82\x98\xe6\x07\xbf\xbc\xde\x41\xfc\xcb\x0e\xe2\x99\xb5\x53\xe1\xa2\x76\xce\x4d\xae\x6b\x89\x20\x60\x6f\x24\xf2\x02\x7b\x23\x6b\x82\xb3\x7a\x08\xc6\xf6\xd8\xc5\xf7\xa2\xdd\x0a\x14\x12\x1d\x28\x03\x67\x18\xf6\x2f\x94\x0f\xb4\xe6\xca\x1a\x8f\x9e\x39\xb1\x36\x62\x70\xe5\x22\x2f\x48\x87\xd3\x25\x28\x13\xd0\x95\x28\x95\x70\x4b\xd6\xb2\xca\xd1\x93\x46\x4f\x94\xa7\x48\x23\xde\x3c\xf1\x10\x82\xab\x31\xcb\xae\xc7\xa3\x91\x56\x68\x42\x5c\x3a\x59\x39\x19\x47\x48\xe9\x48\xb5\x19\x40\xf4\xce\xa3\xd8\xb0\xe6\x75\xc3\x95\xd9\x47\x0e\x25\x19\x5a\x68\xcf\x56\x3e\xfe\x3f\x64\xfe\x68\xbe\xd8\x19\x3d\x7f\xdb\xd0\xdc\x9a\x5b\x63\x30\xe7\x85\x04\x55\xa2\xad\x03\xc9\x3a\x89\x3f\x87\xf0\xb7\x81\x8f\x74\x94\x08\x4b\x71\xaf\xca\xba\x04\x53\x97\x53\x74\x1c\xc9\xaa\x44\x0f\xa1\x10\x01\x04\x38\xfc\xb3\x46\x1f\x60\xa1\xb4\x86\x29\x82\xc3\xe0\x54\x0a\xb4\x99\x50\xba\x76\xd1\x6a\x1d\x66\x0f\x53\x0c\x0b\x44\x93\xc8\x48\xc1\x5a\xdb\x85\x07\x61\x00\xef\x2b\x6b\xa2\xe2\x39\x8b\xda\xd9\x0c\x7c\x10\x2e\xb0\x56\x03\xfc\x0a\x1e\x29\xbb\x47\xa7\xa9\x2b\x52\xd5\x01\x94\xca\xd4\x81\x74\x74\x29\xee\xaf\x23\xd3\x21\x1c\x0c\x9a\x34\xee\xf3\x02\x65\xad\xc9\xff\xfc\x2a\x03\x90\x86\x2f\x79\x23\xd8\xde\x5e\xfa\x90\xdd\x34\x43\x9a\x1c\xb6\x00\x3b\x4b\x69\xcf\xd5\x06\xc4\x3a\xd3\x80\xae\x4d\x21\xcd\xc0\x6b\x41\xbb\xc9\x81\x6f\x87\x97\xc2\x2c\x21\x08\x7f\xcb\xe6\x6d\x46\x53\x44\x58\x83\xbb\x79\x8c\x8a\xda\xdc\xf2\x42\x1a\x26\xda\x9a\x39\x0d\x5f\x08\x15\x5a\x35\xd6\x95\x14\x01\x3d\x4c\x71\x66\x1d\xd9\xca\xdd\x46\x1f\x34\x56\x22\x48\x14\xec\x84\x57\x56\xe2\x58\x99\x79\x6b\xe0\x83\x72\x37\x5b\xd2\x4d\x1a\xcb\x39\x5e\xb8\xd0\xdd\xe6\x4d\xba\x7b\xc4\xfd\xdc\xa8\xd0\x72\xff\xb5\xcc\x32\x6a\x1c\x36\xfe\x9f\xf6\x91\xc4\xf9\xfc\xa4\x75\x16\x51\x07\x5b\x0a\x0a\x2a\xad\x97\x30\x47\x43\x9a\x40\xe6\x7a\x7e\x12\xb7\x93\xc4\xa2\x9d\xb5\x10\xb4\x5a\x34\xa0\xa4\x46\x16\x98\x56\x80\x64\x53\x61\x98\x2c\x79\x74\x17\x54\xf2\x4a\x5f\xd4\x01\xa4\x5d\x98\xe8\x87\xbd\x03\x28\x51\x18\xf2\x60\x74\x48\x7e\x61\x6c\x1b\x06\x30\x68\x3a\x63\x03\xa8\x92\x73\x50\x40\xbd\x04\x31\x0b\x18\x9d\x67\xa6\x9c\x0f\x6c\xd2\x8d\xc0\xe9\x1d\xa4\xc0\x39\x62\xad\xc4\xe9\x37\x17\x19\xdc\x92\x74\x2b\x31\x60\x1e\x60\x41\x41\xe4\xd0\xdb\xda\xe5\x18\x37\x59\xd1\x42\x89\x60\x41\x85\x3e\x30\xc3\x13\x9c\x29\x43\xea\xbf\x6e\x89\x55\x5c\x2e\x4f\x14\xf3\x40\x1d\xfd\x08\xec\x1d\x3a\x82\x3c\x3e\xee\xe7\x53\x2c\xc4\x9d\xb2\xbc\xe1\xb6\xc3\xc9\x38\x9c\xed\xc6\xef\xfd\x6a\xce\x7e\xd3\x5a\xd5\x7e\x08\x9c\x10\x39\x97\x1e\x5d\xae\x68\xba\x9c\xca\x8f\x1b\xd2\x6b\x51\x9e\x4d\x87\x30\xe8\xb7\xd4\x27\xca\xdf\x82\xaf\x44\x8e\x4f\x0e\x22\x92\xb5\x51\x1d\xf8\x9d\x0d\xb9\xe8\x31\x76\x81\x50\xd3\x5a\xfb\x8f\xe3\xcf\x2f\x4d\x0e\x0b\x15\x8a\xdd\x70\xe2\x3d\x87\x43\x8c\xbf\x5f\x7d\x96\x7d\xb0\xee\xb6\x89\x63\x42\x28\x1e\x72\x87\xe4\x61\x20\x6b\x47\xda\xac\x9c\xa5\xac\x4b\x3f\x1b\x9f\x6c\x40\x0e\xab\x57\x79\x90\xca\x61\x1e\xac\x5b\xd2\x04\xc4\xf0\x44\xb9\x21\xf4\xf7\x63\x92\xed\x2d\xac\xbb\xed\x49\xe5\xfe\xa1\x65\x54\x56\x6b\xf6\xdd\x5c\x98\x9c\x56\xa0\xe6\x46\x68\x4a\x18\x63\xab\xb5\x32\xf3\xd5\x12\xfe\x11\xe5\xa0\x91\x04\xcc\x6c\x1d\xf6\xd1\x39\x76\x4f\x02\x6f\x6d\x96\x48\x7b\xcb\x23\xb5\x75\xe0\x06\x43\x88\xc1\xad\x98\x6c\x10\xd5\xe1\xd0\xd7\x3a\x24\x4f\xf3\xe4\xf6\xa8\x25\x39\x14\xd1\x46\xae\x92\xf2\xa1\x32\x73\x1d\x03\x8f\xb9\xad\xe2\x04\xef\x31\xaf\x83\x75\x80\xf7\x2a\xf0\x3e\x70\x61\xe7\xdb\x56\xa2\x21\x97\xe2\x1e\xa6\xcb\x24\x24\xa3\x07\xd6\xcf\xda\x6a\x92\xbb\x37\x8b\x4a\xbc\x26\x42\xe9\x1b\xf5\x89\xf2\xed\x60\x30\x18\x40\x07\x0e\x06\xf0\xf6\x38\x32\xbd\xb2\xae\x8c\x41\x47\x40\x91\x7d\x01\x24\x6a\xa4\x69\x54\xf0\xdc\x44\x2b\x69\x4d\x9c\x24\x8f\x52\xb7\x4a\x9e\x90\x52\x6c\xc5\xa1\x25\x23\xf8\x48\xdb\xdf\x7a\x64\x5d\xa0\xb8\xc3\xd6\x3f\x66\x42\x7b\x8c\x52\x5c\xa8\x52\x85\x98\xc0\xda\x2d\x34\xb7\x26\xaf\x9d\x23\xc8\x43\x89\x49\x5b\x21\xfd\x7e\x5d\xf1\xff\xb8\x97\x8d\x85\x13\x5a\xa3\x9e\x38\x61\xfc\x8c\x0b\x00\xde\xd5\x7a\x2f\xfb\x97\x75\xa0\xa9\xc5\x68\x13\x96\xfb\xd6\x01\x97\x1d\x90\xea\x8e\xfd\x37\xc2\x48\x8d\xce\xbf\xfc\xd4\xd9\xb1\xd5\xe1\xe4\x78\x98\x80\x0a\x05\x75\x74\xd0\xb6\xf4\x4c\xf0\x87\xfa\x76\x84\x5c\xfa\xee\x53\xf9\x78\xc2\xc5\x54\xc3\xec\x58\x78\xe4\xba\x23\x58\xda\xf4\xd9\x95\x9a\x72\x0b\x02\x1b\x90\xd2\x36\xfd\x68\x48\x37\x50\xd3\xd1\x87\x1b\x70\x38\x57\xd6\x70\xca\xa4\x1f\xbc\x1b\x35\x7d\x47\x11\xab\xdd\xe2\x12\xce\x4f\x32\x80\xb7\xb8\xdc\xe8\xbf\xc1\xdc\x61\x68\xc8\xde\xe2\x92\x91\x27\xb5\xc5\x4d\xed\x34\x16\x7c\x69\xe5\x0e\x67\xea\x7e\x5d\x54\x65\x24\xde\xa3\x87\x57\xe4\xec\xdd\x58\x77\xfa\x2e\xef\x7f\x9e\x70\xde\x39\xf5\xc7\x61\x1b\x62\xbf\xbf\xbe\x68\x2a\xad\x54\x52\x7a\x14\x2e\x2f\xd6\x33\xe4\xf5\xc5\x10\x8a\x10\xaa\xe1\xfe\xfe\x1a\xf8\xfd\x65\xc0\x88\xe9\xcc\x5a\x0a\xe4\x91\xb6\xb5\x64\xbf\x88\x91\xc8\x31\xd7\x18\xa5\x9f\xb5\x1d\x24\xff\xd8\xd9\x3f\x30\x0f\xed\xf2\x1b\x3b\x8a\x3c\xb7\x35\x21\xfa\x75\x34\xad\xe2\x0e\xd3\x81\x77\x1c\x4d\x42\x73\x99\x59\x59\xef\x15\xef\x11\xeb\xc4\xbb\x31\x82\x54\x3e\xa7\xed\x0d\x25\xf3\x99\x39\x5b\xc6\xf5\x9a\x3b\xe5\xac\x29\xd1\x30\x94\x5d\xc3\xf0\x6d\x65\x0a\x90\x5d\x52\x7d\xdd\x38\x09\x15\x01\x1e\x0a\x4b\x19\x8d\xab\xfc\x58\x14\xa0\x5f\x03\xf7\x28\x93\xee\x38\x77\xf1\x88\xb8\x71\xf6\xd6\x0a\x56\xde\xd0\x1a\x97\x55\x7e\xd3\x85\xd9\x0d\x19\x78\xd2\xb6\xa5\x0c\x24\x19\xd6\xf2\x5c\x4c\xc7\x34\x82\xcb\x9b\xf6\x68\x64\xcd\xb2\x93\x06\x8d\x24\x51\x4b\xd6\x6d\xc2\xe2\x5b\xf0\x2d\x95\x24\x84\x56\xb9\xcc\x92\xb0\x28\xd0\x44\x75\x31\x6c\x69\xd0\x3f\x01\x45\x23\x81\xab\x19\x42\xe1\x84\xa9\xa9\x2a\x61\x10\xd1\xe2\x0b\x4f\xfb\xa3\x35\x64\xa9\x58\xad\xad\x44\xf9\x84\xce\x76\x63\xb9\x22\xb4\x86\x52\x2c\x61\xaa\x6d\x7e\x4b\x82\x20\xc9\x40\x52\xd1\x34\x51\xb0\x55\xd5\xd1\x94\x7d\x53\x04\xf4\x14\x8f\xca\x17\x11\xf6\xad\x83\xc8\xa6\xa0\x61\x15\x92\xa4\x4d\x31\xc3\xa7\x17\x2e\x1a\x3e\xdf\xaa\xd6\xa8\x4d\x19\xc5\x55\xc4\x66\xcd\xc6\xfc\x24\x21\x6e\x6b\x36\x6d\x24\x09\x5c\xa1\xa4\xaa\x93\xda\x4f\x56\xe9\x07\x35\x4b\xd5\x48\x91\xfc\x68\x55\x54\x51\x30\xbf\x15\xb3\x5b\x31\x6c\x6b\xcb\xd6\x41\x98\x74\x62\x2b\x95\xb7\xa6\xfc\x16\xe9\x3b\x1d\x5f\xc1\x71\x3a\x78\xfa\x06\x79\xfa\xcd\x64\xc4\xa7\x6a\x31\x6e\x26\xb5\x33\x40\xc5\x19\xa7\x05\x1f\x44\xa0\xaa\x8f\x76\x34\xa5\xd1\xf5\xe1\x43\x81\x06\xd0\x50\x72\x95\xdd\x06\x6c\xac\xce\x5b\xd0\xaf\x00\xdc\x9b\xf1\x88\x59\xae\x0a\xaa\x60\x61\xa6\x8c\x6c\xaa\x25\xae\x31\x1d\x82\x0f\x75\x7e\x4b\x1e\x29\xe0\xcf\x1a\x6b\x0a\x4b\x9e\x97\x90\x85\x73\xd6\x11\x0c\x31\x32\x15\x86\x09\xec\x34\x60\x21\x52\x52\x3e\x72\x92\x80\xca\x72\xed\x10\xe1\xba\x95\x3b\x9d\x22\xc4\x73\x9f\xd4\x48\x10\x85\xfc\xbc\x58\xa1\xac\xe2\xd1\x81\x24\x7f\x0b\x87\x3e\x4e\xc4\x71\x13\x17\xfd\x93\x6f\x0f\x2d\x93\xbf\x87\xc2\x7a\x52\x56\x65\x5d\x58\xf9\xdb\x8a\x68\x63\xe6\x21\xbc\x1e\x50\x10\x4c\xb0\xac\x34\x7f\xff\x0f\x7b\x56\x6d\x14\xb9\x19\xc2\x21\xdc\x09\xa3\xb4\x16\xdc\x3c\xc7\x80\xe6\x0e\x0e\x61\x12\xd7\x01\x09\xc6\x70\x29\x71\x08\x0f\x0f\xfd\xd3\xf6\xfb\xf3\x67\x26\x10\x6e\x5e\x53\xc6\xf4\x70\xd8\xc0\x23\x2a\x70\x7b\xbd\x74\xfa\xf0\xf0\xd0\x1f\xf1\xaf\xcf\x9f\xa1\xd7\x23\x65\xf6\x94\xa4\xd6\x89\xf0\xb7\xe7\x32\x71\x21\x84\xc9\xfc\x13\xf8\xf9\xfc\x79\x3f\x1e\xc2\xf6\x78\xe3\xea\x69\x3b\x8f\xe2\x90\xa1\xb6\x29\xd3\x96\x1e\x8f\x13\x99\xcc\xf2\x79\xe2\xd3\x74\xb6\x0e\x4c\xe7\x0b\x5b\x6b\xf9\x31\x24\x7c\xf4\x71\xc6\xf8\xfe\x10\xfe\xfb\xf4\x86\xfb\x29\xe9\x7d\x0c\x76\x45\xd0\x32\x7e\x77\xf5\xf1\xf4\xbf\xce\x27\x1f\xdf\x5d\x7f\x3c\xfd\xfb\xf9\x68\xc2\xe4\x0f\x0f\x6a\x06\x06\xa1\x4f\xa5\x0f\x0c\xa0\x97\x56\xf7\xf0\x50\x39\x65\xc2\x0c\xf6\xd2\x49\xc7\xc7\x9c\x08\x0e\xe1\x47\xb9\x17\x89\x5b\xc2\x1e\xa0\x91\xed\x57\x62\xc7\xe5\x11\xd5\x39\x5f\xe0\x58\x62\x49\xe0\xf3\x10\x7e\xec\x0f\x66\x70\x76\xbc\x97\x86\x7d\x99\x73\xac\xa1\xbe\xc2\x5a\x52\x2d\xb6\xce\x38\x8e\x7a\xc4\x99\x3f\x39\xb4\xb2\x6c\x7c\x7c\xf3\x57\xa4\x7f\x0f\x91\xde\xf9\xb7\xa9\x32\xfb\x53\xe1\x8b\xf8\x39\x3e\xbe\x81\xde\xd5\xa3\x00\x8c\xed\xf6\x6b\x01\x13\xc9\xf0\x6b\xf1\xf7\xf5\x40\x88\x8c\x74\xc4\xa3\x87\x07\xc3\xaa\x32\x87\x2f\x10\x0d\x0d\xdb\x12\xcb\x43\xf2\xd7\xf9\xf4\x05\xe2\xa0\x61\x4a\xd9\x61\xc5\xf5\x4b\x41\xb0\x95\x28\x9f\x99\x18\xcf\x4f\x36\xcc\x92\x9d\x39\x25\x4f\xf9\xca\x69\xf8\x0c\xc3\xfe\xb0\xd3\xac\x3f\x3c\xc7\xa8\x3f\x3c\xc3\xa4\x44\xd4\x9a\xeb\xb9\x46\xfe\x01\x7a\x15\x42\x59\xa9\x97\xc8\x74\x51\x82\xe2\xe3\x5d\x63\xdc\xb3\x97\xb0\x6d\x62\x3a\xf3\xea\x13\xb6\x5c\xbf\xbd\x6d\x6f\x74\xed\xca\xbf\x32\xe4\xf7\x91\x21\xf7\x37\x23\xe9\xe6\xf8\x68\x32\x7a\x03\xbd\xde\x1f\x76\xda\xe3\xc2\xe1\x51\x58\xb5\x24\x26\x2a\xf6\x60\xab\x39\xe2\x94\xaf\x85\x54\x4b\x9e\x60\xc5\x57\xe2\xf4\x19\x01\xd7\x72\x24\x80\xd1\xab\xd0\xb1\xf3\xbd\x48\xf4\xb5\xac\x4b\x2c\x19\x0b\xbc\x08\xc6\x58\xb1\x0d\x65\xb5\x62\xfb\xed\x03\x90\x0f\x59\x8e\x45\xc8\x0b\x90\xe8\x73\xa7\xa6\xc9\xc7\x37\x8f\xc1\x9b\x72\xf0\xe8\xc3\x0d\x44\xea\xed\xcb\x9e\xac\xe1\xf3\xa2\xd1\xdc\xce\xd7\xb8\xfa\x76\x14\x1b\x2e\x8e\xf9\x7a\x25\x06\xeb\x2a\x50\xbf\xfb\x20\x5d\x5f\xdc\xce\x10\xed\xc0\x7f\xd8\x69\xbc\xae\x60\x2b\xe4\xc2\x70\x9d\xaf\x42\x81\x7c\xbb\xc4\xef\x01\x92\x65\x4a\xf1\xc9\x9a\xf6\x52\x02\xae\xa8\xef\xd5\xd1\xf5\xd5\xcf\xb4\xe4\x0d\x3e\x43\xd8\x4b\x51\x45\x91\x2d\x71\xb6\xd7\xcc\xf5\x9f\x94\x04\xff\xb5\x69\x98\xc5\xe6\x0c\x9c\x5a\xf7\xb6\x4e\x03\x9b\xd3\x35\x5f\x61\xae\x66\x0a\x25\xfc\x61\xa7\x31\x0b\xc7\x07\x09\x36\x5d\x30\x30\x15\xf5\xc9\x95\x22\xd4\xa3\xc3\xc4\xd5\xb1\xe1\xfa\xe1\x60\x07\xde\xd6\x53\x74\x86\x8f\xa9\x9f\xe3\xdf\x6b\xe4\x8f\x1c\x7c\xd5\xf7\xa2\x2e\xbe\x62\xfb\x94\x8f\xff\x7f\xdf\xa9\x36\xac\x48\x0e\x17\x2f\xc4\x82\x05\x5f\x89\x85\x21\xe7\xf0\xe9\x48\x30\x83\x15\x41\x73\x54\xc4\x79\xcf\xef\xd8\xf1\x44\xa5\xfe\x8e\xce\xb3\x13\xf1\xfb\xa5\xfd\xbb\xb8\x81\xdd\x2a\x23\x87\xe4\xcc\xfc\x55\x62\x10\x52\x04\xc1\xcf\x86\xd2\x9d\xdb\x3b\xb8\x7a\x37\x81\xd1\x9b\xa3\xab\xb3\x53\xb8\x3a\xba\x3c\x4d\x5d\xf1\x64\xab\xc9\xb0\x27\x29\x73\xc7\xf6\x24\xd4\xc3\x43\xbf\x15\x31\xf5\x53\x0c\xb4\xdc\xd3\x7d\x3d\x5f\x75\x0c\x61\x90\x5a\x49\xc7\x1a\xf9\x34\x71\x98\xb6\x59\x80\xd0\x2c\x28\x7d\x27\x4e\xed\x17\x0d\x33\x41\x28\xd3\x3c\x7a\x5a\xfd\xf5\x5a\x51\x9b\x2d\x68\xed\x46\x00\x5d\xef\x47\xbf\x07\xdb\x8b\x68\xfe\x54\x29\xe6\x38\x04\x5b\xf8\x9a\xc4\x9a\x2a\xdb\xec\xd2\x92\x14\x47\x12\xf9\xb0\x6b\xcc\xb8\xd6\x7a\x6c\xb5\xca\x97\x43\x38\x9f\x5d\xd9\x30\x76\xe8\xd1\x6c\xd3\x0a\x37\xf7\xc3\xad\x36\x92\xf8\xa7\x38\xcb\x4f\xbb\xba\xa2\xd8\x3b\xbb\x5c\x6d\x76\xb6\xf7\x7a\xeb\x8f\xc2\x76\x92\x68\x3b\xff\x67\x87\xba\x2a\x7f\x62\x68\x3c\xdb\xec\x37\x0f\xba\x9e\x98\x38\x9d\x88\xff\xf4\x65\x26\xe9\xa9\xd5\x4e\xa2\xdf\x06\xbf\x0d\x9e\x18\x1d\x91\xc0\xae\xce\x6d\x88\xb7\xfa\x6b\xaf\xd6\xb7\x3c\xa9\xe9\xe5\x43\x92\xdd\x9d\x00\x79\x55\xb3\xe7\xaf\x81\xaf\xed\xbf\x78\x72\xb3\xee\x91\xbb\x8a\x9b\xd5\xdf\x9d\xd5\x75\x89\x97\xb6\x36\x3b\x67\x7d\xd2\xc1\x7d\xb0\x4e\xcc\xf1\x8b\x1e\xce\xf2\x10\xe7\x78\x5d\xb6\xe2\xb1\x6f\xab\x90\x9c\xfd\xd1\x15\xda\x97\x18\x7a\xcc\x6b\xa7\xc2\x72\x64\x4d\xc0\xfb\xf0\xd8\xbb\x2b\xa7\xee\x94\xc6\x39\xca\x36\x0f\xc3\xfa\xa2\x1c\x32\xc6\x69\xa2\xe7\x8a\x60\x4f\xb6\xad\x8c\x67\x07\xf9\x73\x74\xc0\x2f\x4d\xf8\x02\xf6\x21\x76\x7d\x8b\x13\xf7\x9b\x28\xc8\x37\x38\x68\xef\xfc\x0b\xd7\x61\x4f\x5d\x86\x65\x1d\xb8\xa0\xc0\xe4\x23\x10\xf0\x4b\x1f\xb0\xec\x67\xdc\x94\x16\x12\x91\xc1\x87\x42\x05\xd4\xca\xf3\xb5\x12\x87\xf2\xda\xbd\x78\x25\x42\xe1\x61\x51\xa8\xbc\x68\x40\x81\xf2\x20\xb4\xb6\x0b\x94\xe9\xba\x0f\x7d\xbc\x24\x8b\x8d\x27\x6a\x75\x13\xd2\xdf\x27\x29\xde\x4c\x26\xe3\x34\x63\xfb\x18\x2b\xd8\xf6\xfe\x1b\xaa\x7a\xaa\x55\x0e\xf1\x1c\x37\x5d\xd1\x2c\x70\x0a\x77\x4a\x80\x80\xb3\xd3\x49\x13\xaf\xfd\x6c\x8d\xd5\x70\xe3\x7e\x8c\x20\x51\x11\x42\xf5\xca\xff\xbc\x3e\xc2\x6f\x5c\x2d\xbd\x1e\xf8\x2c\x8b\x98\xf0\xe6\xf5\x70\x05\x2b\x64\x73\x6d\xff\xc2\x4f\xdf\xb6\x5e\xa6\xbd\xd4\x25\x72\x07\x46\x09\x0e\x22\xa4\xd8\x68\x5f\x1f\xb3\x0c\x37\xaf\xa1\x72\xf6\x4e\x49\x74\x1e\x7c\x9d\x17\x20\x3c\x5c\x2a\xa3\x6c\x73\xd3\x3f\xc2\xaa\xc8\x3a\x70\x86\x06\x9d\xca\x49\x19\xf1\x15\xe8\x4a\x21\x1c\xd6\xf1\x19\xe8\xa9\x91\x95\x55\x26\xce\x1e\x9b\x1a\x91\xe3\xd7\xba\x70\xf1\x26\x79\xcd\x46\xbb\x74\xfc\xfd\xde\x15\x67\x37\x0b\x35\x0b\xbb\xe5\x7e\xef\xd1\x5d\x3d\x71\x19\x08\x70\x54\x87\x82\x2f\xd9\xe3\xf5\x1f\x1a\x61\xc2\x1a\x75\x6c\x48\x8f\xdb\x9a\x72\x60\xad\xbf\x03\xbf\x0e\x06\x70\x79\x4c\x72\x15\xb5\xb9\xbd\x51\x9f\xf0\x78\x49\xf0\x9d\x3a\xe2\x5f\x96\xfd\xbe\xe1\xfe\x8f\x45\x5c\x3d\xf4\x1b\xf8\x24\xf1\x10\xf6\x84\xb1\x66\x59\xda\xda\x6f\x89\xbd\xd6\xfe\xbf\x01\x00\x00\xff\xff\xd9\x37\x76\x01\x15\x30\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 12309, mode: os.FileMode(420), modTime: time.Unix(1582222150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6e\x1b\x3d\x0c\xbc\xeb\x29\x08\x07\x41\x4e\x6b\x6f\x2e\x1f\x10\xdd\x02\x27\x48\xf2\xa1\x71\x8c\x34\x68\xcf\xf2\x9a\x6b\x0b\xd6\x5f\x29\xca\xad\x61\xec\xbb\x17\xf2\xae\x83\xf5\x1f\xda\xf2\x44\x91\x9a\xe1\x48\x1a\xa9\xa0\xbf\x21\x45\xed\x9d\x84\x99\xe2\x6a\x39\x5a\xdf\x8a\x95\x76\x73\x09\xff\xfb\x99\xb0\xc8\x6a\xae\x58\x49\x01\x70\x75\x05\x0f\x6f\x30\x79\xfb\x80\xf1\xf3\xfd\xe4\xe9\x11\x26\xf7\xaf\x8f\x02\xc0\x29\x8b\x12\xb6\xdb\xe1\x87\x8a\xab\x97\x79\xd3\x74\xb5\x18\x54\xd5\x36\x26\xfb\x55\xd3\x88\x18\xb0\x92\x20\x00\x66\xaa\x5a\xf9\xba\xfe\xa2\xad\x66\x09\xa5\x00\xa8\xbc\x0d\x06\x59\x7b\x17\x25\xdc\x0a\x00\x46\x1b\x8c\x62\xcc\xd3\x01\x76\xc8\x5d\x96\xb7\x3a\x56\xda\x21\xc5\x1d\x57\x1b\xc5\xa7\x94\x40\xda\x71\x0d\x83\x3a\x39\x87\xa6\xf8\xe9\x69\x85\x54\x5c\xc7\x01\xf4\x45\xee\x43\x5b\xb5\x40\x09\x7e\x19\x53\x96\x30\xd3\x7e\xd4\x01\x57\x69\x86\xe4\x90\x31\x76\x1c\x32\xcb\x89\x7c\x0c\x9e\x26\x63\xa6\xde\xe8\x6a\x23\xe1\xa5\x9e\x78\x9e\x12\x46\x74\xfd\x7d\x8a\x16\x51\xf6\xd6\x59\xee\x4d\x3b\xe6\xe6\xb8\xdc\xce\x3a\x29\x53\x72\x27\xb5\xa2\x78\x5c\xa3\xe3\xef\xa4\x19\x29\x9e\xb4\x8d\x5f\xfc\x2b\x84\x42\x75\x06\xf2\x15\x69\x8d\x34\x7c\xf6\x91\xf3\x25\x9f\x19\x54\x29\xb3\xf4\x91\x2f\x63\xdf\xa7\xe3\xa9\xa7\xd3\x0d\x77\xe5\x5d\x79\x06\xc5\xf9\xa1\x1e\x8e\x1b\x87\x36\xdb\x07\x61\xf4\x89\x2a\x3c\xba\xe1\xdc\xf8\x91\x30\xf2\x49\x1d\xa0\x0a\x29\x3b\x45\xd7\xe0\x10\x86\xe3\x90\x22\x94\x50\x34\xcd\x76\xbb\x5b\xe4\x04\xd0\x44\x84\x9c\x0d\x6e\xcb\xd2\x0e\x72\x86\xee\x70\x72\x1b\x16\xad\xa7\x4d\x8f\xef\x5d\xd9\xa7\x19\x94\xc3\x8e\x72\xef\xc7\xeb\x61\x59\x3f\x0d\xba\xf6\x8e\xce\x44\x6c\x07\xfc\xf7\x7a\x96\x7f\xed\x4d\xb2\xf8\xea\x93\x3b\x3e\xc4\x45\xb7\x47\xf6\xa4\x16\x78\xd1\xee\x3b\xc1\x99\x70\xaa\x78\xd9\xc7\x8f\x7c\xe0\xce\xf9\xa3\xde\xcf\x29\xe6\x9a\x46\x97\xc8\x22\x56\x89\x34\x6f\xc6\xde\x31\xfe\xe2\x43\x89\x81\xf4\x5a\x1b\x5c\xe0\x5c\x02\x53\x42\x21\x3e\x9f\x8b\x15\xf1\xfe\xc7\x4c\x70\x8d\x24\xfa\xe7\xfd\xab\x5f\xfd\xa7\x73\xa2\x0d\xbc\x79\xd0\x24\x61\xdb\x88\xdf\x01\x00\x00\xff\xff\x8e\x75\x00\xec\xe8\x04\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1256, mode: os.FileMode(420), modTime: time.Unix(1582222120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt":  configGridengineTemplateTxt,
	"config/pbs-template.txt":         configPbsTemplateTxt,
	"config/slurm-template.txt":       configSlurmTemplateTxt,
	"config/default-config.yaml":      configDefaultConfigYaml,
	"config/htcondor-template.txt":    configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml": configKubernetesTemplateYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":      {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":  {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":    {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-template.yaml": {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":         {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":       {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
