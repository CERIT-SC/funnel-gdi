// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/kubernetes-pvc.yaml (309B)
// config/gridengine-template.txt (346B)
// config/pbs-template.txt (361B)
// config/slurm-template.txt (415B)
// config/kubernetes-pv.yaml (560B)
// config/kubernetes-executor-template.yaml (1.232kB)
// config/default-config.yaml (11.651kB)
// config/htcondor-template.txt (505B)
// config/kubernetes-template.yaml (1.53kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configKubernetesPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x81\xff\xec\xfc\xe4\xaa\x6b\x28\xa5\x87\x84\x50\x8a\x73\xde\xca\xd3\x22\x6c\x4b\xaa\x56\x32\x2d\x26\xef\x5e\x6c\x6c\x4a\x8e\xb3\x3b\xf3\xc1\xf7\x0f\xb7\x98\x7b\xe6\xff\x4f\xdf\x74\xb5\xc4\x8c\x6b\x7b\x32\x92\x7c\xcb\xac\x3e\x06\x8b\xe9\x68\x7a\x1f\x3a\x8b\xeb\x72\xd1\xc2\x50\xda\x38\xd4\x91\xa7\x41\xfc\x68\x46\x16\xe9\xa4\x88\x35\x40\x90\x91\x16\x1f\x35\x04\x0e\x4d\x9a\x5c\x33\xcf\x87\x37\xd1\xfe\xa5\xbb\xdf\xb7\xb7\x26\x71\xb4\x98\x67\x1c\x2e\x7b\xc4\xfa\x1d\xe4\x9d\x83\x2e\x18\x40\x52\xda\x39\x6b\x2e\x2b\x64\x99\xfd\xf1\x34\xd1\x2d\x6d\x71\x8e\xaa\xe7\xd8\x71\x1b\x37\x78\xa5\x74\xb7\xec\x0b\xcf\x12\x7e\x0c\x90\xa9\xb1\x66\xb7\x17\x32\xbf\x2a\xb5\x6c\x09\xd0\x12\xb3\x7c\xd2\xe2\xf8\xec\x0d\x30\xad\x76\x97\x47\x97\x07\x95\xdf\x00\x00\x00\xff\xff\x01\x27\x69\xed\x35\x01\x00\x00")

func configKubernetesPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvcYaml,
		"config/kubernetes-pvc.yaml",
	)
}

func configKubernetesPvcYaml() (*asset, error) {
	bytes, err := configKubernetesPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pvc.yaml", size: 309, mode: os.FileMode(0644), modTime: time.Unix(1736375625, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xc, 0x1f, 0x92, 0xa1, 0xb3, 0x7, 0x8, 0xb0, 0x29, 0x2f, 0x8e, 0x77, 0x9d, 0x10, 0x18, 0xc6, 0xcd, 0x90, 0xbf, 0xdf, 0x92, 0xf6, 0xf5, 0x81, 0x70, 0x47, 0xb6, 0x35, 0x85, 0x1a, 0x9d}}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xf2, 0xbf, 0x61, 0x66, 0xfc, 0x3e, 0xf3, 0xf9, 0x1f, 0x77, 0x7b, 0xa2, 0xfa, 0x90, 0x1d, 0xf1, 0x81, 0x31, 0xca, 0xc2, 0x64, 0x2, 0x29, 0x41, 0x39, 0xe9, 0xac, 0x46, 0x4, 0x46, 0x43}}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x79, 0x28, 0x19, 0xf9, 0xa3, 0x7b, 0xf0, 0x79, 0x32, 0xc3, 0xcd, 0x53, 0x5d, 0x65, 0xb0, 0xc4, 0xdb, 0x64, 0x16, 0x86, 0xa3, 0x9f, 0x80, 0x59, 0xed, 0x48, 0xa6, 0xb1, 0x14, 0xc4, 0x5f}}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x36, 0xd7, 0x29, 0x50, 0x7c, 0xe3, 0x2b, 0x54, 0x30, 0x8d, 0x8, 0x41, 0x58, 0xaa, 0xa0, 0x48, 0x6f, 0x0, 0xf2, 0x68, 0xed, 0xbe, 0x7e, 0x9e, 0xb0, 0xe4, 0x7f, 0x86, 0x7d, 0xdf, 0x2d}}
	return a, nil
}

var _configKubernetesPvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\xab\xdb\x30\x0c\xc7\xef\xfe\x14\x82\x9d\x93\xed\x31\x1e\x03\xc3\x3b\x6c\x30\xb6\x1d\xda\x95\x30\xda\xb3\x6a\xab\x45\xc4\xb1\x8d\xad\xa4\x2b\xa1\xdf\x7d\xd8\x69\xc6\x6b\x6f\x96\xf4\xd3\x5f\xfa\x5b\x1f\xe0\x10\x52\x4f\xe9\xe3\xf7\xbf\x64\x46\x09\x09\x76\x7b\x85\x91\xf7\x94\x32\x07\xaf\x61\x7a\x51\x3d\x7b\xab\x61\x57\x32\x59\xc8\xcb\x3e\xb8\x71\x20\x35\x90\xa0\x45\x41\xad\x00\x3c\x0e\xa4\xe1\x34\x7a\x4f\xae\x89\x53\x33\xcf\xed\x1f\xcc\xfd\x2f\x7b\xbb\x29\x00\x87\x47\x72\xb9\x70\x00\x18\xe3\x0a\xd6\x58\x2a\xa6\xe1\x7d\x47\x8e\x64\x0a\x6d\x30\xa2\x61\xb9\x2e\x9d\x59\x42\xc2\x33\x69\x78\xf9\xc1\x0a\x00\x8d\xa1\x9c\x37\xc1\xd2\x5d\xb9\x81\x8e\xd0\x1e\x12\x0b\x6d\xd0\x5f\x15\x40\x7c\x5a\xb9\x23\xe3\x90\x87\x5d\x70\x6c\xae\x1a\x3a\x12\x64\xaf\x00\x86\x30\x7a\xf9\x1d\x85\x83\xff\xaf\x85\xce\x85\x4b\x63\xc9\x91\xd0\x43\x2a\x4c\x94\x2e\x65\xc8\x3d\x9b\xe8\xcc\xc1\xbf\xcd\x73\xdb\xd5\x57\x75\x5c\x0a\x27\x76\xd4\x0c\xc1\xd2\xdb\xa7\x2f\xaf\xaf\xc5\x4e\xe6\x45\xdd\x26\x9e\x28\x69\xc8\x9f\x5b\x93\xb9\xc5\x4b\x6e\x4d\x18\x6a\x69\xaa\x8b\xfe\x44\x6f\x1d\x15\xa0\x31\x99\x9f\x7e\x73\x85\xbe\x8a\x24\x3e\x8e\xb2\xfa\x07\x38\x8e\xa6\x27\xd9\xd6\x5b\xcc\x73\xfb\xad\x86\xb5\xa7\xfa\xee\xe8\xb4\x90\xe5\x5a\x39\xa2\x59\xb0\xed\x1a\xdd\xd5\x9f\x6e\x69\x1e\xc6\xff\x0b\x00\x00\xff\xff\x33\x84\x08\xef\x30\x02\x00\x00")

func configKubernetesPvYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvYaml,
		"config/kubernetes-pv.yaml",
	)
}

func configKubernetesPvYaml() (*asset, error) {
	bytes, err := configKubernetesPvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pv.yaml", size: 560, mode: os.FileMode(0644), modTime: time.Unix(1736375625, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x15, 0x2e, 0x42, 0x94, 0x68, 0xc1, 0xf2, 0x27, 0xfe, 0xb7, 0xa7, 0xe8, 0x8d, 0x53, 0x1a, 0x1b, 0x36, 0xb0, 0x5c, 0xc, 0x59, 0xb4, 0x7d, 0x16, 0x9c, 0x2b, 0x72, 0xfc, 0x17, 0x7c, 0x20}}
	return a, nil
}

var _configKubernetesExecutorTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcd\x4f\xdb\x4e\x10\xbd\xfb\xaf\x18\x39\xfc\x6e\xd8\x98\xcb\xef\x60\xa9\x07\x14\x10\x1f\x2a\x01\xb5\x88\x1e\xaa\x1e\xc6\x9b\x49\xb2\xcd\x7e\x75\x67\x1d\x40\x56\xfe\xf7\x6a\xfd\x55\x07\x28\xf5\x69\xb2\xef\xf9\xbd\x37\x93\x59\xcf\xe0\x01\x79\x0b\x17\xcf\x24\xea\x60\x7d\x82\x4e\x3e\x92\x67\x69\x4d\x09\x15\x06\xb1\x39\xd9\x9d\x26\x5b\x69\x96\x25\xdc\xd8\x2a\xd1\x14\x70\x89\x01\xcb\x04\xc0\xa0\xa6\x12\x9a\x26\x8f\x0a\xd7\xcb\xfd\x3e\x6b\x9a\xfc\xc6\x56\xb1\xec\x61\x76\x28\x3a\xce\x62\xf8\xd5\x62\x0a\x2b\x52\x1c\x45\x00\xd0\xb9\x12\x56\xb5\x31\xa4\x32\x1a\x62\x44\xe0\xa7\xad\xb2\x0f\x3d\xd8\x91\x88\x1a\x15\x8a\xad\x5d\xad\x3e\x4b\x2d\x43\x09\x45\x02\x20\xac\x76\x8a\x82\xb4\x86\x4b\x38\x4d\x00\x02\x69\xa7\x30\x50\x67\x39\xbc\x18\x1f\x4f\x1c\xd0\x87\x7b\xab\xa4\x78\x29\x61\x41\x3b\xf2\x3d\xc4\xe4\x77\x52\xd0\x99\x10\xb6\x36\x61\xd1\x46\xe9\x83\x32\xf6\x1c\x61\x4d\x40\x69\xc8\xf3\x20\x98\xf5\x83\xe9\x99\x4f\xd6\x6f\xc9\x67\x93\x16\x7a\x1e\x80\xd4\xb8\xee\xba\xbb\x8e\xd5\x6b\xe4\xbe\x56\x6a\x88\x75\xa6\x9e\xf0\x85\x47\x5c\x58\xad\x31\xfe\x27\xdf\xd3\x93\x4a\x9a\x13\xde\xa4\xc7\x90\x66\x22\xfd\x31\x52\xd0\xaf\xb9\xd5\x9e\x77\xdc\x89\x7a\x8c\x24\xcd\xfa\x5c\xfa\x96\xf0\xcd\xfa\xed\x52\xfa\x09\xc1\x13\xdb\xda\x0b\x1a\x7b\xea\x0e\x7f\xd5\xc4\xe1\xe0\x0c\x40\xb8\x3a\x8a\xc8\x15\x18\x82\x7c\xee\x6a\x86\x02\xb2\xfd\x3e\x1a\xbb\x9a\x63\x01\xa4\x98\x20\x56\xe9\x69\x51\xe8\x34\x56\x74\x10\x28\x3e\x9a\xb4\xf5\x2f\x13\xad\x2f\xa8\x2f\x2b\x28\xf2\x5e\xce\x79\x69\xc2\x0a\xd2\xff\xf2\x62\x75\x99\xf6\x70\x2b\xa5\x98\x3a\xf1\xff\x6f\xff\xa2\x4d\x6e\x43\x9a\x3c\xaa\x8c\x83\xf5\xfd\xd0\x7b\x9b\x73\xc9\xdb\x8f\x7c\x3a\xfc\xd0\xa8\x28\xde\x73\x1a\x8b\x9d\x55\xb5\xa6\xdb\xb8\x34\x93\x69\xcd\x66\x33\x38\xbf\x83\xc5\xdd\x03\xcc\xaf\xce\x16\x97\x17\xf0\x70\x75\xfd\x75\x84\x9b\xc6\xa3\x59\x13\x1c\xc9\xe5\xf3\x31\x1c\xc9\x40\x1a\xca\x4f\x90\x3f\xb6\x62\x3c\xf1\x79\xb5\x60\x7d\x4b\x59\xd3\x1c\xbd\x5d\x31\x00\x1d\x63\xdc\x63\xd8\xc4\x9e\x5b\xd9\x7c\x3e\xec\x6c\x3c\x3e\x20\x73\x5d\x8d\xd4\x51\xec\x5f\xaf\x0d\x73\x48\xa6\xdd\x73\x09\xef\xdf\x87\x3f\x71\xdf\xa6\x75\xf1\xcb\xc3\x81\x4c\xe8\xba\x9e\x2b\x94\x7a\xba\x6f\x22\x1e\x1c\x5c\x44\xb7\x13\x07\x52\xbf\x03\x00\x00\xff\xff\x00\x13\xe6\xe4\xd0\x04\x00\x00")

func configKubernetesExecutorTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesExecutorTemplateYaml,
		"config/kubernetes-executor-template.yaml",
	)
}

func configKubernetesExecutorTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesExecutorTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-executor-template.yaml", size: 1232, mode: os.FileMode(0644), modTime: time.Unix(1736375625, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xc4, 0x2b, 0x17, 0x62, 0x5d, 0x51, 0xe4, 0x35, 0x84, 0xde, 0x2a, 0x3, 0x35, 0x7d, 0x71, 0x79, 0x5a, 0xe0, 0xbd, 0x90, 0xcd, 0x65, 0x9d, 0xe8, 0x11, 0x72, 0x90, 0x35, 0xe7, 0x36, 0x7a}}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3a\x5d\x73\x1b\x39\x72\xef\xf3\x2b\x3a\xe2\x5e\xc5\x5b\xc5\x2f\xed\xd6\x5e\x72\xac\xd2\x83\xbe\xd6\x56\x2c\x7b\x19\x91\x8e\x93\x27\x17\x66\xd0\xc3\xc1\x72\x06\x98\x05\x30\xa2\x69\xc7\xff\x3d\xd5\x0d\xcc\x07\x29\x79\xed\xbb\x93\xab\x36\x75\xa7\x17\x71\x80\x46\xa3\xd1\xdf\xdd\xc0\x08\xd6\x05\x82\x16\x15\x82\xc9\xc1\x17\x08\x22\xf3\xea\x1e\xc1\xa1\xbd\x47\x0b\x52\x78\x91\x0a\x87\x90\x8a\x6c\x8b\x5a\x26\x23\x38\xbf\x17\xaa\x14\x69\xd9\x8d\xb9\x05\xa4\xa6\xf4\x32\x1d\x43\x2a\xe4\x06\xed\x98\x97\x39\x6f\x2c\x8e\x41\xee\xb5\xa8\x0c\x4d\x62\x29\x9c\x57\xd9\x18\x2a\xa3\x37\x46\xa6\xc9\x55\x44\xde\xae\x4f\x92\xcf\x92\x93\x99\xaa\x6e\xfc\x97\xc8\x28\x4d\x26\xca\x31\x14\x3e\x33\x5a\x1a\x3b\x06\x57\x36\xb6\x1a\x43\x9d\xba\x31\x6c\xac\x92\xa8\x37\x4a\xe3\x18\x2a\xa1\x1b\x82\x14\x3b\x37\x49\x85\xcf\x8a\x31\x6c\x9b\x14\xad\x46\x8f\x2e\xb9\x0c\x9b\x45\x7c\xbf\x43\x15\xde\xa3\xf6\xb0\xb3\xca\xa3\x6d\xc9\x78\xe6\xbe\x9f\x7e\x96\xbc\xcd\xf8\x6f\x63\xd5\x18\xb6\x22\xdf\x8a\xe4\x9a\x36\x7c\xcb\xfb\xb9\x45\x02\x30\x69\x39\x47\x3f\x4b\xb3\x49\x92\x5b\xb3\xd9\xa0\xa5\xb9\x11\xd0\x6f\xa5\x37\x50\xe2\x3d\x96\x6e\x01\x12\xd3\x66\x33\x06\xa5\x73\x33\x06\xb4\xd6\xd8\x04\xe0\x96\x26\x17\x3c\xc8\x8b\x18\x3b\xe1\x72\xe0\x0d\xf8\x42\x39\xa8\x85\x2f\xa6\x70\x93\x03\x56\xb5\xdf\x8f\xc3\xa4\xb0\xc8\x27\xf7\xa8\x09\xd0\x79\x89\xd6\x4e\x13\x80\x5f\x1a\x5f\x37\xfe\x67\x55\xe2\x02\x4e\x4e\x92\x64\xc5\x9a\x14\x28\x7a\x61\x9c\x1f\xf2\xf1\xe7\x46\x6b\x2c\xa3\xb2\xd1\x62\x02\x78\x2d\xaa\x96\xf7\x85\x71\x3e\xe1\x95\x4b\x63\x3d\x34\x0e\x25\xe4\xc6\xc2\x8b\xf5\x7a\x49\x3a\x51\x35\x5a\x65\xc2\x2b\xa3\x41\x68\xc9\x28\x77\x98\x82\x14\xae\x48\x8d\xb0\x92\x51\xae\xd7\x4b\x5a\xbd\x80\x7f\x9f\xcf\xe7\x8f\x61\xbb\x5b\x5e\x1e\x22\xa3\x65\x77\xcb\xcb\xb0\xea\x2f\xf3\xbf\xc4\x55\x77\xf8\x5b\xa3\x2c\x49\xd4\xa9\x0c\x44\xe3\x0b\xd4\xbe\xdd\x9f\x10\xd1\xfe\xd1\x70\xce\x97\x37\x0e\x1a\x47\xec\x17\x50\x0b\xe7\x76\x26\x90\x33\x22\x46\xd2\xd6\xa4\x85\x5b\x04\xd7\x58\x24\x06\xd6\xd6\xd4\x68\xcb\x3d\x58\x74\xde\xaa\xcc\x83\xc8\x32\x74\x51\x0a\x64\x01\x3a\x57\x1b\xc8\x55\x89\x8c\xe5\x19\x4e\x37\x53\xc8\x8a\xca\x48\xf8\xf3\x7c\x0e\x39\xb3\x72\x1a\xc0\xa6\xfb\xaa\xfc\x9e\xc1\x2e\x88\xd6\xf3\xc6\x17\x41\x00\xa4\x27\x6f\x1c\xda\x05\x91\x60\x4f\xe3\x18\xc0\x32\x52\xb8\x00\x91\x66\xa7\x3f\xfc\xf8\x08\xf0\x0f\x8f\x00\xe7\xc6\xa4\xc2\x06\xee\xdc\xe8\xac\x6c\x24\x82\x80\x93\x4b\x91\x15\x38\xb9\x34\xda\x5b\x53\x2e\x40\x9b\x09\x6b\xf8\x49\x90\x5b\x81\x42\xa2\x05\xa5\xe1\x39\xfa\xd9\xad\x72\x9e\xce\x5c\x1b\xed\xd0\x31\x26\xe6\x46\xb0\xad\x4c\x64\x05\xf1\x30\xdd\x83\xd2\x1e\x6d\x85\x52\x09\xbb\x67\x2e\xab\x0c\x1d\x71\xf4\x4a\x39\x32\x34\xc2\xcd\x1b\x2f\xc0\xdb\x06\x93\xe4\x6e\x79\x79\x59\x2a\xd4\x3e\x1c\x9d\xa4\x1c\x85\x23\xa4\xb4\xe8\x68\xb3\xa0\x9c\xe7\xe1\x7b\xa0\x74\x8b\x5e\xea\x97\x16\x25\xc9\x59\x94\x8e\x85\x7c\xf1\xff\x48\xfa\x41\x7a\x61\x32\x28\xfe\xb1\x9c\x79\x34\x33\x5a\x63\xc6\x07\xf1\xaa\x42\xd3\x78\xa2\x75\x1d\x7e\x2e\xe0\xcf\x73\x17\xe0\xc8\x0d\x56\xe2\xbd\xaa\x9a\x0a\x74\x53\xa5\x68\xd9\x90\x55\x85\x0e\x7c\x21\x3c\x08\xb0\xf8\x5b\x83\xce\xc3\x4e\x95\x25\xa4\x08\x16\xbd\x55\xd1\xce\x72\xa1\xca\xc6\x06\xa1\x8d\x18\x3d\xa4\xe8\x77\x88\x3a\x82\x11\x83\xcb\xd2\xec\x1c\x08\x0d\xf8\xbe\x36\x3a\x30\x9e\x7d\xa8\xc9\x73\x70\x5e\x58\xcf\x5c\xf5\xf0\x13\x38\x24\x3f\x1f\x74\xa6\xa9\x89\x55\xa7\x50\x29\xdd\x78\xe2\xd1\x2b\xf1\xfe\x2e\x20\x5d\xc0\xe9\xbc\x75\xe2\x2e\x2b\x50\x36\x25\xa9\x9f\xeb\x1d\x00\x71\xf8\x15\x87\x84\xe3\x40\x33\x4d\x56\xed\x8a\xd6\x83\xed\xc0\xe4\xd1\xe9\xd9\x46\x83\x18\xe2\xf4\x68\x3b\x07\xd2\x2e\xbc\x13\x14\x4a\x4e\x5d\xb7\xbc\x12\x7a\x0f\x5e\xb8\x2d\x4b\xb7\x5d\x4d\xf6\x60\x34\x3e\x8e\xe3\xb2\x68\xf4\x96\xcf\xd1\x22\x29\x8d\xde\xd0\xf2\x9d\x50\xbe\xe3\x62\x53\x4b\xe1\xd1\x41\x8a\xb9\xb1\x24\x2a\xbb\x0d\x2a\xa8\x8d\x44\x90\x28\x58\x07\x5f\x1b\x89\x4b\xa5\x37\x9d\x7c\x4f\xab\xc7\xd1\x12\x6b\xe2\x5a\xf6\xf0\xc2\xfa\xf1\x31\x6e\x62\xdd\x03\xec\x37\x5a\xf9\x0e\xfb\x4f\x55\x92\xd0\xe0\xa2\x55\xff\x18\x45\x22\xe6\x9b\xab\x4e\x57\x44\xe3\x4d\x25\xc8\xa6\xca\x72\x0f\x1b\xd4\xc4\x09\x64\xac\x37\x57\x21\x98\x44\x14\xdd\xae\x85\xa0\xd3\xa2\x06\x25\x4b\x64\x82\xe9\x04\x48\x22\x15\x9a\xc1\xa2\x42\x8f\x41\x45\xa5\x74\x45\xe3\x41\x9a\x9d\x0e\x6a\x38\x39\x85\x0a\x85\x26\x05\x46\x8b\xa4\x16\xda\x74\x56\x00\xf3\x76\x32\x0c\x80\xaa\xd8\x03\x79\x2c\xf7\x20\x72\x8f\x41\x77\x72\x65\x9d\x67\x91\x1e\xd8\xcd\xe4\x34\xda\xcd\x39\x73\x25\x6c\x7f\x78\x48\x6f\xf7\xc4\x5b\x89\x1e\x33\x0f\x3b\xb2\x21\x8b\xce\x34\x36\xc3\x10\x62\x45\x97\x47\x78\x03\xca\x07\x9a\xaf\x30\x57\x9a\xb8\x7f\xd7\xc1\xaa\x70\x5a\xde\x27\x78\x81\x26\xa8\x11\x98\x7b\xb4\x94\xfa\xb8\x10\xcc\x53\x2c\xc4\xbd\x32\x1c\x6d\xbb\xe5\x24\x1b\xf6\x75\xcb\x37\xae\xdf\x72\xda\x8e\xd6\x8d\x5b\x00\xbb\x43\x76\xa4\xe7\xaf\x7a\x98\x31\xfb\xf1\x8b\x16\xf4\x4e\x54\xcf\xd3\x05\xcc\xa7\x1d\xf4\x95\x72\x5b\x70\xb5\xc8\xf0\xb3\x8b\x08\x64\xb0\x6a\x04\x3f\xb3\x1c\x77\x13\x4e\x5c\xc0\x37\x74\xd6\xe9\x43\xf3\x73\x7b\x9d\xc1\x4e\xf9\xe2\xf1\x5c\xe2\x0d\x5b\x43\x30\xbf\x9f\x5c\x92\xbc\x35\x76\xdb\x9a\x31\xa5\x27\x0e\x32\x8b\xa4\x60\x20\x1b\x4b\xdc\xac\xad\x21\x9f\x4b\x3f\x5b\x95\x6c\x33\x1c\x66\xaf\x72\x20\x95\xc5\xcc\x1b\xbb\xa7\x0d\x08\xe1\x95\xb2\x0b\x98\xce\x82\x8b\x9d\xec\x8c\xdd\x4e\xa4\xb2\x7f\xd5\x31\x6a\x53\x96\xac\xba\x99\xd0\x19\x9d\x40\x6d\xb4\x28\xc9\x5f\x2c\x4d\x59\x2a\xbd\xe9\x8f\xf0\xd7\x30\x07\xb5\xa4\xac\xcc\x34\x7e\x86\xd6\xb2\x76\x52\xe6\xd6\x39\x89\x18\x59\x1e\xb0\x6d\x04\x2b\xf4\x3e\xd8\xb6\x62\xb0\x79\x60\x87\x45\xd7\x94\x3e\x6a\x9a\x23\xad\xc7\x52\x92\x42\x11\x6c\xc0\x2a\xc9\x1d\x2a\xbd\x29\x83\xdd\x31\xb6\xde\x4c\xf0\x3d\x66\x8d\x37\x16\xf0\xbd\xf2\x1c\x05\x6e\xcd\xe6\x58\x4a\xb4\xe4\x95\x78\x0f\xe9\x3e\x12\xc9\xa9\x03\xf3\x67\x70\x9a\xa8\xee\xed\xa1\x22\xae\xb5\x50\xe5\x4a\x7d\x20\x77\x3b\x9f\xcf\xe7\x30\x82\xd3\x39\xbc\xbc\x08\x48\x5f\x1b\x5b\x05\x9b\xa3\x2c\x91\x75\x01\x24\x96\x94\xf1\x83\xf2\x8e\x87\xe8\x24\x9d\x88\x23\xe5\x81\xea\x8e\xc9\x6b\x62\x8a\xa9\xd9\xb4\x64\xc8\x3c\x62\xf0\x1b\x5a\xd6\x2d\x8a\x7b\xec\xf4\x23\x17\xa5\xc3\x40\xc5\xad\xaa\x94\x0f\xfe\xab\x0b\xa0\x99\xd1\x59\x63\x2d\xe5\x3b\xe4\x97\x4a\x23\xa4\x9b\x35\x35\xff\x0f\x91\x6c\x29\xac\x28\x4b\x2c\xd7\x56\x68\x97\x53\xf2\x1f\x62\xda\xe4\x69\xff\x92\x11\xb4\x35\x19\x85\x60\x39\x33\x16\xb8\xe4\x80\x58\x73\xcc\x5e\x08\x2d\x4b\xb4\xee\xe9\xb7\x4e\x2e\x4c\xe9\xaf\x2e\x16\x31\x4d\x21\xa3\x0e\x0a\xda\x95\xa0\x31\xf9\xa1\xb9\x47\x4c\x2e\x7e\x4f\xa9\x8c\xbc\xe2\x42\xaa\x45\x76\x21\x1c\x72\xd1\xe1\x0d\x85\x7c\x56\xa5\xb6\xd4\x02\xcf\x02\x24\xaf\x4d\x3f\x5a\xd0\x83\x9c\xe9\xfc\xed\x0a\x2c\x6e\x94\xd1\xec\x32\xe9\x07\x07\xa3\x76\xee\x3c\x64\x6a\x5b\xdc\xc3\xcd\x55\x02\xf0\x12\xf7\x07\xf3\x2b\xcc\x2c\xfa\x16\xec\x25\xee\x39\xef\xa4\xb1\x10\xd3\xae\x43\xb1\x17\x4f\x6e\x31\x57\xef\x87\xa4\x2a\x2d\xf1\x3d\x3a\x78\x46\xca\x3e\x0e\x35\xa7\x1b\x73\xf8\x73\x94\xe5\xdd\xd0\x7c\x58\x76\x40\xf6\x9b\xbb\xdb\xb6\xcc\x8a\xe5\xa4\x43\x61\xb3\x62\xe8\x21\xef\x6e\x17\x50\x78\x5f\x2f\x66\xb3\x41\xea\xfb\xc3\x9c\xf3\xa5\xe7\xc6\x90\x21\x5f\x96\xa6\x91\xac\x17\xc1\x12\xd9\xe6\x5a\xa1\x4c\x93\x6e\x82\xe8\x5f\x5a\xf3\x2b\x66\xbe\x3b\x7e\x2b\x47\x91\x65\xa6\xa1\x74\x7e\x98\x4b\xab\x10\x61\x46\xf0\x0b\x5b\x93\x28\xb9\xc6\xac\x8d\x73\x8a\x63\xc4\x10\xf8\xf1\x14\x41\x2a\x97\x51\x78\x43\xc9\x78\x72\x6b\xaa\x70\x5e\x7d\xaf\xac\xd1\x15\x6a\x0e\x98\x83\x0c\xbe\x2f\x4b\x5f\x51\x65\xdd\xaa\x08\x15\x00\x0e\x0a\x43\xfe\x8c\xeb\xfb\x50\x10\xa0\x1b\x24\xf6\x28\x23\xe7\xd8\x73\xf1\x8a\x10\x36\x27\x6d\x95\x3e\xe4\x62\x88\xd3\xad\xea\x2a\x77\xa8\xca\xac\x8e\x9c\x7e\x52\xf8\x52\x1a\x22\x35\x03\x7f\x17\xdc\x32\xad\xe0\x1a\xa7\x6b\x95\x0c\x24\xbc\x6e\x93\x92\x48\x74\xc5\x3c\x8e\x19\xf9\x51\x16\x17\x0b\x13\x4a\x5a\xb9\xd6\x92\xb0\x2b\x50\x07\xb6\x71\xf6\xd2\xd6\x00\x94\x2f\x6a\x09\x5c\xd3\x50\x2e\x4e\x99\x35\xd5\x26\x9c\x4c\x74\x79\x86\xa3\x38\x69\x34\x49\x2c\x94\x6c\x3d\x29\x1f\xd0\x9a\x71\x28\x5a\x44\x59\x42\x25\xf6\x90\x96\x26\xdb\x12\x21\x48\x34\x10\x55\xb4\x4d\x20\xac\xaf\x3d\xda\xda\x2f\x45\x40\x47\x76\xa9\x5c\x11\xb2\xbf\x61\x2e\xd9\x96\x35\xcc\x42\xa2\xb4\x2d\x69\xb8\x85\x61\x83\x02\x64\x47\x35\x1b\x8d\x29\xad\xb8\x96\x38\xac\xdc\x18\x9f\xa4\xc4\xdb\xe8\x43\x19\x49\x4a\xb2\x50\x52\xe9\x49\xe3\x57\xbd\x1b\xc2\x92\xa9\x6a\xa9\x88\xda\xde\x97\x56\xa4\x5e\x2f\x45\xbe\x15\x8b\xae\xc2\xec\x54\x85\x41\xd7\xa6\x56\x59\x27\xca\x6f\xe1\xc6\x63\x0b\x0b\x2e\x62\xf3\xe9\x1b\xf8\xeb\x17\xeb\x4b\xee\xb2\x05\x0b\x5a\x37\x56\x03\x95\x68\xec\x1e\x9c\x17\x9e\x6a\x3f\x8a\x6c\xaa\x44\x3b\x85\xb7\x05\x6a\x40\x4d\x4e\x56\x8e\xdb\xa4\xa3\x6f\xba\xa0\xeb\x13\xb9\x17\xcb\x4b\x46\xd9\xd7\x55\xde\x40\xae\xb4\x6c\x8b\x26\xae\x34\x2d\x82\xf3\x4d\xb6\x25\x8d\x14\xf0\x5b\x83\x0d\x19\x28\xef\x4b\x19\x86\xb5\xc6\x52\x3a\xa2\x65\x2c\x0f\x63\xd2\xd3\x26\x0d\x01\x92\xfc\x92\x95\x94\xb0\xec\x07\x9d\x84\xbb\x8e\xee\xd8\x4a\x08\xcd\x9f\x38\x48\xa9\x0a\xe9\x79\xd1\x67\x5b\xc5\x83\x06\x25\x7f\x0b\x8b\x2e\x6c\xc4\x76\x13\x0e\xfd\xaf\xae\x6b\x62\x46\x7d\xf7\x85\x71\xc4\xac\xda\x58\xdf\xeb\x5b\x0f\x74\xb0\x33\x05\x7e\x32\x82\x35\x56\x75\x29\x3c\x76\x0e\xad\x1f\x5a\xc0\xff\xb2\xb2\x35\x5a\x91\xe6\x21\x9c\xc1\xbd\xd0\xaa\x2c\x05\x0f\x6f\xd0\xa3\xbe\x87\x33\x58\x87\xa3\x41\xcc\x70\xb8\xc8\x38\x83\x8f\x1f\xa7\xd7\xdd\xf7\xa7\x4f\x0c\x20\xec\xa6\x21\x67\xea\xe0\xac\xcd\x9c\xa8\xf4\x9d\x4c\x62\x5b\xe2\xe3\xc7\xe9\x25\xff\xfa\xf4\x09\x26\x13\xe2\xef\x44\x49\x1a\x5d\x0b\xb7\xbd\x91\x11\x0b\x25\x9f\x8c\x3f\xe6\x45\x9f\x3e\xcd\x42\x9f\x76\xc2\x31\x6d\x52\x9a\x4d\x20\x87\x64\x77\x0c\x19\xa3\x7d\x68\x33\x32\x98\xe1\x3e\xe3\xe7\xe1\x4c\xe3\x19\xce\x15\xa6\x29\xe5\x3b\x1f\x53\xa7\x77\x39\xa7\xfe\x67\xf0\x3f\xd7\x2b\x9e\x27\x3f\xf8\xce\x9b\x1e\xa0\x43\xfc\xcb\xeb\x77\xd7\xff\x7d\xb3\x7e\xf7\xcb\xdd\xbb\xeb\xff\xba\xb9\x5c\x33\xf8\xc7\x8f\x2a\x07\x8d\x30\xa5\xaa\x08\xe6\x30\x89\xa7\xfb\xf8\xb1\xb6\x4a\xfb\x1c\x4e\x62\x0b\xe4\x5d\x46\x00\x67\xf0\x27\x79\x12\x80\x3b\xc0\x09\xa0\x96\xdd\x57\x44\xc7\x95\x13\x95\x40\xbf\x83\xb1\xc2\x8a\xf2\xd2\x33\xf8\xd3\x74\x9e\xc3\xf3\x8b\x93\xb8\xec\xf7\x31\x87\xf2\xea\x0b\xa8\x25\x95\x69\x43\xc4\x61\xd5\x03\xcc\xfc\xc9\xd6\x96\x24\xcb\x8b\xd5\x3f\x8d\xff\x0f\x6a\xfc\xa3\x7f\x49\x95\x9e\xa5\xc2\x15\xe1\x73\x79\xb1\x82\xc9\xeb\x07\x36\x19\xc6\xcd\x97\x6c\x28\x80\xe1\x97\x4c\xf2\xcb\xb6\x11\x10\x95\x21\x7b\x3d\x3b\x5d\xd4\xb5\x3e\x7b\x02\x03\x69\xd1\x56\x58\x9d\x91\x0a\x6f\xd2\x27\x30\x8d\x16\x29\x39\x8c\x1e\xeb\xef\xd9\xc5\x91\xef\xfc\x4a\x5f\x79\x73\x75\x20\x96\xe4\xb9\x55\xf2\x9a\x2f\xaa\x16\x7f\x9b\xac\xbf\x7b\x54\xd2\xdf\x7d\x8d\x9c\xbf\xfb\x0a\x29\x13\x50\x27\xc1\xaf\x95\xfb\x77\x30\xa9\x11\xaa\x5a\x3d\x85\x3f\x0c\x14\x14\xef\xee\x5b\x79\x3f\x7f\x0a\x71\x47\xa4\xb9\x53\x1f\xb0\xc3\xfa\xed\xc5\xbd\x2a\x1b\x5b\xfd\xd3\x8f\xfe\x61\xfd\xe8\xec\xd0\xb8\x56\x17\xe7\xeb\xcb\x17\x30\x99\xfc\x6a\xd2\x09\x17\x21\x0f\x2c\xad\x03\xd1\x81\xd7\xa7\x47\xc3\x21\xc1\xf9\x92\x95\x75\xe0\x31\x1f\xf9\x82\xe9\x7e\x85\x0d\x76\x18\x29\x33\x99\xd4\x68\x59\x1f\x9f\xc4\x20\x3b\xd4\x15\x56\x9c\x44\x3c\x49\x72\xd2\xa3\xf5\x55\xdd\xa3\xfd\xf6\x36\xc9\x8d\x9b\x0b\xe1\xb3\x02\x24\xba\xcc\xaa\x34\xaa\xfd\x61\x6b\xbd\x2d\x2d\xcf\xdf\xae\x20\x40\x3f\xb8\x3e\x6a\xf1\x3c\xa9\x81\x77\xfb\xb5\xda\x7f\x6c\xd8\x9a\x0b\x6d\xbe\xb1\x09\xf6\xdb\xdb\xee\x1f\xde\x6e\x87\x87\x7b\xd4\x6a\x47\xf0\x1f\x26\x0d\x57\x20\x2c\x85\x4c\x68\xee\x19\x28\x5f\x20\x5f\x58\xf1\x03\x83\x28\x99\x4a\x7c\x30\xba\xbb\xe8\x80\xd7\x34\xf7\xec\xfc\xee\xf5\xf7\x74\xe4\x03\x3c\x0b\x38\x89\x56\x45\x96\x2d\x31\x3f\x69\xf7\xfa\x4f\xf2\x8b\x7f\xdf\x36\x8c\xe2\x70\x07\xf6\xb6\x27\x47\x1d\xc6\xb6\x63\xe7\x6a\xcc\x54\xae\x50\xc2\xaf\x26\x0d\x8e\x39\xbc\x70\x30\xf1\xd2\x82\xa1\x68\x4e\xf6\x8c\x50\x0f\x1a\x94\x7d\x2b\x72\xd8\x70\x1c\xc1\xcb\xee\xb1\xcb\x57\xe9\xf7\x00\xfc\x81\x82\xf7\x73\x8b\xee\x8e\xb8\x6b\xf4\x73\x8b\xcb\x9b\x38\x10\xa2\x86\x9b\x0e\x1e\xc7\xb4\x90\x6e\x01\xd2\x64\x5b\xb4\x07\x0f\x71\x00\xae\xe3\xfc\x02\x4e\xc2\xfc\x09\x3c\xa5\x21\xbd\x1c\xee\xf5\xa8\x25\xfd\xa3\x87\xc8\x03\x5d\x21\xb5\x0e\x57\x79\xde\x80\xab\xc5\x4e\x93\x0a\xba\xd8\xc4\x4c\xa0\x07\x20\x79\x61\x2e\x9a\xd2\x9f\x1c\x23\x59\x85\xa7\x1b\xe7\xb1\x25\x3c\xe8\x74\x47\x95\x8e\x4d\xb3\x1e\xa6\xb7\x1b\x27\x4e\xe2\x05\x91\x0b\x4f\xae\xc8\xe7\x92\x15\xf8\x18\xb6\xa7\xb0\x42\x0c\x3d\x6d\xb7\x98\xcd\x7a\x5d\x9a\x2a\x33\x93\x26\x73\x33\x8b\x39\x5a\xd4\x19\xce\xba\x0b\xe6\x01\xd8\x44\xd4\x6a\x76\x7f\x3a\x3d\xfd\xb7\xd9\x88\x8c\xf4\xfe\x34\xbc\x0f\x3b\xc8\x0c\x62\x73\x7b\x98\x3d\xb4\x3d\xd8\x7a\x70\x71\x51\x05\x22\x0f\xc8\x7b\x2c\xe9\x08\xaf\x4c\x0e\xef\x6c\xf3\x63\xbb\x6b\x0d\x65\x9a\xb4\x5e\xa9\x43\xda\xbf\x63\xe8\xae\xaa\x3a\xfd\xe3\x5e\x75\x6b\x44\x0f\x4e\x70\x3c\xf1\xb9\x93\x74\xf6\x3c\x3c\xc7\x63\x8b\xa3\x7f\x79\xea\x5e\xe3\x08\x56\xde\x58\xb1\xc1\x6f\xd0\xc6\x1c\xfd\x1d\x97\x0e\x9f\xbb\x72\x48\x46\x70\x6b\x32\x11\x4a\x47\x70\x7b\xe7\xb1\x9a\x26\x3c\x14\x0f\x12\x7c\xe5\xdb\x42\x79\x2c\x95\xe3\xa6\x3d\x5f\x1d\x0c\x6e\x1f\x49\x00\x0e\x76\x85\xca\x8a\xd6\x81\x29\x07\xa2\x2c\xcd\x2e\x38\xd5\xf0\x42\x88\x2f\x23\xc2\xe0\x95\xea\xfb\xcc\xd3\x19\x51\xf1\x62\xbd\x5e\xc6\x1d\xbb\x07\x2f\xde\x74\xb7\x8c\x50\x37\x69\xa9\x32\x08\x2d\xb1\xd8\x00\xdf\x61\x0a\xf7\x4a\x80\x80\xe7\xd7\xeb\xf6\x3d\xcf\x34\x19\xa0\x5a\x1c\xdc\x3e\x90\xe2\x91\xbd\x3d\x73\xdf\x0f\x57\xb8\x83\xc6\xfd\x8f\x73\x97\x24\x21\x4a\xae\x7e\x5c\xf4\x2e\x50\xb6\x97\xa3\x4f\xfc\xbc\xe8\xe8\xf5\xcf\x53\x5d\xd5\xf5\x76\x8a\x7c\x4f\x43\x7c\x6d\xdf\x77\x32\x0d\xab\x1f\xa1\xb6\xe6\x5e\x49\xb4\x0e\x5c\x93\x15\x20\x1c\xbc\x52\x5a\x99\xf6\x3e\xf5\x12\xeb\x22\x19\xc1\x73\x72\x3e\x2a\x23\x66\x84\x87\x76\x3d\x43\x38\x14\x84\x97\x76\xd7\x5a\xd6\x46\xe9\xb0\x7b\x18\x6a\x49\x0e\x5f\x43\xe2\xc2\x7d\xdd\x40\x46\x8f\xf1\xf8\x0f\x7c\x23\xb7\xda\xa9\xdc\x3f\x4e\xf7\x1b\x87\xf6\xf5\x67\xae\x5a\x00\xce\x1b\x5f\xf0\x55\x66\xac\xe0\xb4\xd0\x7e\x00\x1d\x06\xe2\x0b\xa2\x36\x41\x1a\xcc\x8f\xe0\xa7\xf9\x1c\x5e\x5d\x10\x5d\x45\xa3\xb7\x2b\xf5\x01\x2f\xf6\x94\xd0\xd0\x44\xf8\x4b\x92\x9f\x0f\xd4\xff\x21\x89\xfd\x6b\xaa\xb9\x8b\x14\x2f\xe0\x44\x68\xa3\xf7\x95\x69\xdc\x11\xd9\x83\xf1\xff\x0b\x00\x00\xff\xff\x36\x56\xe2\xa5\x83\x2d\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 11651, mode: os.FileMode(0644), modTime: time.Unix(1736375625, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xbc, 0xbc, 0x79, 0x10, 0xf8, 0x1b, 0xe3, 0x54, 0x50, 0x7c, 0x9a, 0x93, 0xe8, 0x33, 0x8f, 0x3d, 0x4, 0x4d, 0x16, 0x82, 0x49, 0x55, 0x4c, 0x38, 0xed, 0x51, 0xcc, 0xaf, 0x5b, 0x99, 0x56}}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3, 0xc3, 0xc4, 0x14, 0xdf, 0x97, 0x3b, 0x68, 0xaf, 0x9e, 0xee, 0x13, 0x1, 0xbd, 0x3, 0x61, 0x3c, 0x95, 0x4b, 0x8f, 0x27, 0xcf, 0x52, 0x2d, 0x11, 0x2d, 0x67, 0x54, 0xd2, 0x1, 0x79}}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc9\x6e\xdb\x30\x10\xbd\xeb\x2b\x06\x2e\x7a\xa4\xa5\x5c\x7a\xd0\x2d\x48\xd0\x20\x45\x13\x04\x45\x91\x9e\x47\xf4\x28\x26\xcc\x2d\x1c\xca\x81\x61\xf8\xdf\x0b\x8a\x72\x4a\x39\x76\x80\xf2\x44\xcd\xf2\xde\x9b\x45\xfc\x02\xdf\x07\x6b\x49\xc3\x1f\x17\x36\x14\x2a\xf4\xea\x99\x02\x2b\x67\x5b\xe8\x30\xca\x75\xbd\xbd\xaa\x36\xca\xae\x5a\xf8\xe1\xba\xca\x50\xc4\x15\x46\x6c\x2b\x00\x8b\x86\x5a\xd8\xef\x97\xbf\x91\x37\xf7\xab\xc3\x61\xb2\xb1\x47\x99\x1d\x8f\xc7\xaf\xd1\xa7\xb1\x23\xcd\x29\x13\x00\xbd\x6f\xa1\x1f\x99\xc5\x5b\x66\x4e\xe6\x88\xbc\x11\x6a\x35\x47\x65\x4f\xb2\x85\x0a\xa0\x43\xb9\x71\x7d\xff\x53\x19\x15\x5b\x68\x2a\x00\xe9\x8c\xd7\x14\x95\xb3\xdc\xc2\x55\x05\x10\xc9\x78\x8d\x91\x32\x4b\xa9\x36\x9d\x52\xc1\x27\x2a\x2e\x2a\x49\x8e\x51\xcd\x14\xe6\x83\x72\x41\xc5\xdd\x8d\x46\xe6\xc7\xb1\x1d\xd6\x59\xe1\x03\x91\xf1\x51\x75\x9a\x84\x4c\xae\x29\x9c\x29\x6c\x95\xa4\x6b\x29\xdd\x60\x63\x8e\x9f\xd8\x19\xa7\x98\x40\x1c\x31\xc4\x27\xa7\x95\xdc\xb5\xf0\x48\xdb\x77\x51\xd2\xd9\x88\xca\x52\xe0\xb1\x1b\xf9\x88\x69\x0c\xb3\x2a\xc4\xa9\xe8\x7c\x94\xc1\x17\x6a\xe1\x75\xc0\xdd\x52\xb9\xda\xad\x79\x10\xa9\x83\xa2\x53\xae\xce\x00\xed\x8a\xb6\xa4\x9d\x37\x64\xe3\x69\xe6\xd3\xa0\xf5\x51\xd7\xb5\x7e\xc3\x1d\x17\x11\x18\x5e\x8a\xc6\x66\x65\x8b\xac\x66\x71\x6a\x0e\x83\xfd\x60\x13\x42\x3a\xdb\xab\x97\x0f\x8e\x9a\xa2\xac\xb3\xaf\x9e\x15\xb9\xdc\xa1\xd1\x67\x70\xd2\xe4\xee\x6f\x4f\x1d\xe7\x3b\x12\x88\xdd\x10\x24\x9d\x48\x0f\xf4\x3a\x10\xc7\x13\x2b\x80\xf4\x43\x5a\x08\xd5\x83\x25\x58\xde\xf8\x81\xa1\x01\x71\x38\xec\xf7\xe3\x47\xba\x00\x69\x26\x48\xb7\xc5\x55\xd3\x98\x45\xba\x91\x9d\xb3\xc2\xb8\x9a\xc6\x85\x5d\x81\xf6\x0b\xcd\x5d\x07\xcd\x72\x02\xf4\x41\xd9\xd8\xc3\xe2\xeb\xb2\xe9\xef\x16\x93\x7b\x04\xd3\x4c\x19\xfe\xdb\xc3\x45\x74\xf2\x6b\x32\x14\x50\x0b\x8e\x2e\x8c\x53\x7f\x27\xba\x55\xbc\xf9\x8c\x29\xfb\xe7\x54\x4d\x73\x9e\x6b\xeb\xf4\x60\xe8\x21\xad\xf3\xac\x59\xc7\xad\xcc\x73\x13\x39\x6c\xa6\xd1\xa4\x9c\x27\x8c\xeb\x16\x8a\x09\x17\x21\x67\xd0\x8e\xff\x4a\x2e\xe9\xc2\x92\xcf\xa1\x9d\x8f\xd3\xd6\x94\xcb\x23\x56\x2a\xd4\x97\xd2\x79\xe8\x72\x72\x19\x50\x95\xf5\xfe\xfb\xff\x3e\xaf\x33\x5b\x1f\xd0\x97\xad\x99\x95\x32\x55\x5d\xfd\x77\x9d\x3e\xbd\xd1\x1c\xc9\xc6\xe7\x91\xf3\x46\xa3\x32\x25\x8d\x4c\x86\xd9\x13\xe3\xb7\x72\x06\xf5\x37\x00\x00\xff\xff\x7a\xf6\x56\xd4\xfa\x05\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1530, mode: os.FileMode(0644), modTime: time.Unix(1736802712, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xa, 0x2c, 0x4c, 0x49, 0xbd, 0x45, 0xe2, 0x1c, 0x73, 0x77, 0x3d, 0x4b, 0xd6, 0xc, 0xf9, 0x4e, 0x16, 0xd5, 0xba, 0xdd, 0xb6, 0x56, 0xd1, 0xa9, 0xa, 0x9b, 0x9d, 0x86, 0x66, 0x8e, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/kubernetes-pvc.yaml":               configKubernetesPvcYaml,
	"config/gridengine-template.txt":           configGridengineTemplateTxt,
	"config/pbs-template.txt":                  configPbsTemplateTxt,
	"config/slurm-template.txt":                configSlurmTemplateTxt,
	"config/kubernetes-pv.yaml":                configKubernetesPvYaml,
	"config/kubernetes-executor-template.yaml": configKubernetesExecutorTemplateYaml,
	"config/default-config.yaml":               configDefaultConfigYaml,
	"config/htcondor-template.txt":             configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml":          configKubernetesTemplateYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":               {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":           {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":             {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-executor-template.yaml": {configKubernetesExecutorTemplateYaml, map[string]*bintree{}},
		"kubernetes-pv.yaml":                {configKubernetesPvYaml, map[string]*bintree{}},
		"kubernetes-pvc.yaml":               {configKubernetesPvcYaml, map[string]*bintree{}},
		"kubernetes-template.yaml":          {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":                  {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":                {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
