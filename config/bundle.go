// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x53\x1b\x39\xf2\x7f\x9f\xbf\xa2\xbf\x90\xad\x4a\xaa\x3c\x06\x36\xb5\xdf\xba\x75\x15\x0f\x60\xd8\x84\x0b\x21\x1c\x76\x2e\x77\x4f\x94\x66\xd4\xe3\xd1\x7a\x46\x9a\x95\x34\x76\xbc\x5c\xfe\xf7\xab\x6e\x69\xc6\x36\x31\x81\xbb\x25\x5b\xc7\xd3\x58\x6a\x7d\xba\xd5\xdd\xea\x5f\xec\xc3\xb4\x44\xd0\xa2\x46\x30\x05\xf8\x12\x41\xe4\x5e\x2d\x10\x1c\xda\x05\x5a\x90\xc2\x8b\x4c\x38\x84\x4c\xe4\x73\xd4\x32\xd9\x87\x93\x85\x50\x95\xc8\xaa\x7e\xcd\x8d\x20\x33\x95\x97\xd9\x00\xe4\x4a\x8b\xda\xd0\x17\x56\xc2\x79\x95\x0f\xa0\x36\x7a\x66\x64\x96\x9c\x45\xa4\x8e\x38\x49\x1e\xe4\x9d\x9b\xba\x69\xfd\x63\x3c\x2b\x93\x8b\x6a\x00\xa5\xcf\x8d\x96\xc6\x0e\xc0\x55\xad\xad\x07\xd0\x64\x6e\x00\x33\xab\x24\xea\x99\xd2\x38\x80\x5a\xe8\x96\x28\xc5\xd2\xa5\x99\xf0\x79\x99\x8c\x03\x83\x88\xf1\x0d\x49\x70\x81\xda\xc3\xd2\x2a\x8f\xb6\x63\xfd\xd2\xbd\x1a\x3e\x28\xd2\x6c\xf0\x04\x5d\x0c\x60\x2e\x8a\xb9\x48\xce\x09\xfd\x13\x83\xbb\x11\x24\x00\x69\xa7\x1b\xfa\xac\xcc\x2c\x49\x2e\xcd\x6c\x86\x76\x94\x00\xec\x03\x7d\x2b\x3d\x83\x0a\x17\x58\xb9\x11\x48\xcc\xda\xd9\x00\x94\x2e\xcc\x00\xd0\x5a\x63\x13\x80\x4b\xda\x1c\xf1\x22\x1f\x62\x78\xc2\x72\xe0\x0d\xf8\x52\x39\x68\x84\x2f\x87\x70\x51\x00\xd6\x8d\x5f\x0d\xc2\xa6\xb0\xc8\xf7\xf4\xa8\x89\xd0\x79\x89\xd6\x0e\x13\x80\x0f\xad\x6f\x5a\xff\x8b\xaa\x70\x04\x7b\x7b\x49\x32\x61\xc7\x08\x12\xbd\x35\xce\x6f\x6a\xed\x97\x56\x6b\xac\xa2\xef\xd0\x61\x22\xb8\x12\x75\xa7\xe9\xd2\x38\x9f\xf0\xc9\x6b\x63\x3d\xb4\x0e\x25\x14\xc6\xc2\xdb\xe9\xf4\x9a\xac\x5e\xb7\x5a\xe5\xc2\x2b\xa3\x41\x68\xc9\x90\x4b\xcc\x40\x0a\x57\x66\x46\x58\xc9\x90\xd3\xe9\x35\x9d\x1e\xc1\x5f\x0e\x0f\x0f\x77\xa1\xdd\x5c\x8f\xb7\xc1\xe8\xd8\xcd\xf5\x38\x9c\xfa\xf9\xf0\xe7\x78\xea\x06\x7f\x6b\x95\x25\xfb\x39\x95\x83\x68\x7d\x89\xda\x77\xfc\x09\x88\xf8\xc7\x77\x70\x72\x7d\xe1\xa0\x75\xa4\x7e\x01\x8d\x70\x6e\x69\x82\x38\xfb\xa4\x48\x62\x4d\x7e\x36\x47\x70\xad\x45\x52\x60\x63\x4d\x83\xb6\x5a\x81\x45\xe7\xad\xca\x3d\x88\x3c\x47\x17\xad\x40\x3e\xae\x0b\x35\x83\x42\x55\xc8\x28\x2f\x71\x38\x1b\x42\x5e\xd6\x46\xc2\xff\x1f\x1e\x42\xc1\xaa\x1c\x06\xb2\xe1\xaa\xae\x5e\x85\x9b\x46\xd6\x23\x10\x59\x7e\xf4\xe3\xeb\x70\x93\x0b\x9d\x57\xad\x44\x10\xb0\x37\x16\x79\x89\xe9\xd8\x68\x6f\x4d\x35\x02\x6d\x52\xe7\x8d\xc5\xbd\xa0\xe3\x12\x85\x44\x0b\x4a\xc3\x1b\xf4\x07\x97\xca\x79\x92\xaf\x31\xda\xa1\x63\x24\x96\x3c\x78\x7d\x2e\xf2\x92\xee\x9b\xad\x40\x69\x8f\xb6\x46\xa9\x84\x5d\xb1\x46\x54\x8e\x8e\x6e\x7f\xa6\x1c\x3d\x01\xc2\x66\xc6\x23\xf0\xb6\xc5\xa8\x5e\x32\x43\xa5\x18\xca\x68\x8d\x39\xeb\xd5\xab\x1a\x4d\xeb\xa3\xea\x34\x68\xa1\x8d\x43\x7a\xc2\x2e\x9a\x69\xcc\x67\xa6\x81\x6e\x44\xca\xe8\xfe\x60\x1f\x5e\x1f\x42\xa4\x4e\xba\x67\xeb\xf2\x12\x65\x5b\xd1\xb5\xdc\xda\x09\x48\xc7\xef\xf9\xe1\xdf\x0f\x27\x43\x48\x26\xdd\x91\xce\x8d\x97\x60\x8a\xe8\xf9\xb6\xd5\x20\x36\x41\x3d\xda\xde\x8b\x76\x89\xdc\x81\xdd\x08\x8a\x28\x47\x9b\xd2\x1e\x45\x61\x7b\x2e\xb5\xd0\x2b\xf0\xc2\xcd\xd9\x0f\x3a\x26\x64\x0f\xa3\x71\x9b\x55\x07\x3b\x2e\x5b\x3d\x27\xdc\x1e\xa4\x32\x7a\x46\xc7\x97\x42\x79\xc8\xd0\x2f\x11\x35\xb4\x8d\x14\x1e\x1d\x64\x58\x18\x8b\x50\x0b\x3b\x0f\xce\xaa\x8d\x44\x90\x28\xe4\x43\xf2\x5f\x19\x89\xd7\x4a\xcf\x1e\xd0\xf8\x11\xd4\x4a\xb7\x1e\x77\xb3\x27\x55\x47\x1e\x1c\x35\x84\xf5\x83\xfb\x32\x90\x29\x9e\x24\xc5\x85\x56\x6b\xbb\xbf\x3e\xdc\x12\xe3\xa7\x28\x86\x4b\x12\x22\x1d\x75\x4f\x2f\xc6\xb0\x28\xc3\xc5\x19\x2c\x55\x55\x41\x86\xf4\x9e\x4d\x2d\xe8\x3d\x57\xd5\x0a\x66\xa8\x49\xb7\xc8\xfc\x2f\xce\x42\x28\x8b\x10\xbd\x7c\xa5\x20\xfd\xa1\x06\x25\x2b\xe4\xab\xd1\x5d\x91\x9c\x49\x68\x26\x8b\xde\x3b\x00\xe5\x03\x23\x57\xb6\x1e\xa4\x59\x46\xef\x48\x8f\xa0\x46\xa1\x1d\x11\x5b\x24\x87\xd4\xa6\x77\x79\x38\xec\x36\xc3\x02\xa8\x9a\xdf\x94\xc7\x6a\x05\xa2\xf0\x18\xbc\xb6\x50\xd6\x79\x76\x12\xc2\xec\xf5\x91\x1e\x05\x81\x4f\x58\x55\x81\xfb\xf6\x1d\xbd\x5d\x91\x11\x24\x7a\xcc\x3d\x2c\x4b\xc1\x8f\xdb\xb4\x36\xc7\x10\xdf\x45\x9f\xb2\xbc\x01\xe5\x87\xc0\x80\x67\x58\x28\x4d\x76\xba\xe9\x89\x55\xb8\x2d\x33\x0a\x11\xa8\x0d\x8e\x09\x66\x81\x96\x52\xab\x0b\xa9\x24\xc3\x52\x2c\x94\xe1\x58\xdf\x1f\x27\xdb\x10\xf0\xf8\xfa\xa3\x5b\xf3\x1c\x76\xab\x4d\xeb\x46\xc0\x21\x98\xa3\xc4\xc9\xfb\x35\xcd\x80\x23\xd3\x69\x47\x7a\x23\xea\x37\xd9\x08\x0e\x87\x3d\xf5\x99\x72\x73\x70\x8d\xc8\xf1\xc1\x43\x44\xb2\x71\x6a\x1f\x7e\x61\x3b\x2e\x53\x4e\x9b\xe0\x5b\xba\xeb\xf0\xeb\x77\xef\x56\x3a\x87\xa5\xf2\xe5\xee\x4c\xb6\xcb\x67\x3f\xf2\x9b\x0b\xef\xfe\xa7\x6d\x67\xed\x83\xd4\x27\x63\xe7\x5d\x9c\xa1\x24\xea\x20\xb7\x48\x8e\x08\xb2\xb5\xa4\xf5\xc6\x1a\xca\x0b\xf4\xd9\xb9\x6e\x97\x87\xd9\x0c\xca\x81\x54\x16\x73\x6f\xec\x8a\x98\x12\xe0\x99\xb2\x23\x18\x1e\x84\x1c\x91\x2e\x8d\x9d\xa7\x52\xd9\xff\xec\xba\x48\x09\x56\xb8\x39\xa5\xff\x3e\x7a\xc4\xe4\xf4\x6c\xb7\xa7\x93\xef\xc5\x67\x55\xb7\xf5\x9a\xd9\x4b\xe7\xa5\x69\xfd\x01\x5a\xfb\x0a\x9c\xfa\x3d\x58\x30\x5b\x45\x01\xb2\xb6\x28\xa8\xda\xda\x0e\x6c\xc4\xf1\x94\x77\x26\xea\xf7\x2e\xce\x52\x78\x3a\x84\x77\xa7\x81\xd1\x95\xb1\x75\x78\x08\x54\x37\xb0\xde\x41\x62\x85\x84\xab\xbc\xe3\x25\x52\x73\xaf\xce\xf8\xe8\xf0\x33\xe6\xad\xef\xd5\x34\x25\x95\x9b\x86\xdd\x5d\x86\xfc\x46\xde\x2e\xfc\x96\xb7\x5f\xa2\x58\x60\x6f\x8b\x42\x54\x0e\x93\x64\x3f\x7d\xde\xbf\x64\x1f\xba\xb2\xd9\x51\x45\x74\x60\x2c\x70\xd1\x08\xb1\x6a\x3c\x78\x2b\xb4\xac\xd0\xba\xe7\x67\x9d\x9c\x9a\xca\x9f\x9d\x8e\x62\xd9\x41\xef\x22\x38\x47\xdf\x12\xc4\xda\x85\xf6\x76\x78\x63\xfc\x3d\xa4\x4a\xff\x8c\x4b\xe1\x0e\xec\x54\x38\xe4\xaa\xd1\x1b\xca\xd7\x1c\x68\xbb\x62\x19\x3c\xeb\x9b\x02\x1f\x7d\x74\xa4\xa3\x58\x0f\x85\x08\xf8\x69\x02\x16\x67\xca\x68\x8e\x3a\xf4\xc1\xf1\xbc\xdb\x3b\x09\x85\xd6\x1c\x57\x70\x71\x96\x00\xbc\xc3\xd5\xd6\xfe\x04\x73\x8b\xbe\x23\x7b\x87\x2b\xca\xb6\xbc\x16\xd2\xc2\x79\x28\xd7\xe3\xcd\x2d\x16\xea\xf3\xa6\xa8\x4a\x4b\xfc\x8c\x0e\x5e\x92\x43\x0f\x42\x8b\xe0\x06\x9c\x41\x1c\x15\x69\x17\xb4\x1f\x8e\x6d\x89\xfd\xf1\xe6\xb2\xab\x93\x63\x43\xe0\x50\xd8\xbc\xdc\x78\x66\x1f\x6f\x2e\x47\x50\x7a\xdf\x8c\x0e\x0e\xfa\x82\x79\xf4\xf3\x8f\x54\xe7\xee\xc3\x1b\x63\x66\x15\xc2\xb8\x32\xad\x64\xbf\xe0\xca\x2e\xbc\xab\xce\x28\xc3\xa4\xdf\x20\xf9\xaf\xad\xf9\x15\x73\xdf\x5f\xbf\xb3\xa3\xc8\x73\xd3\x52\x61\x66\x51\x52\xd1\x2b\x2a\xc7\xe6\x0c\x2f\xe0\x03\x3b\xbf\xa8\xb8\x49\x68\x8c\x73\x8a\xc3\xec\x26\xf1\xee\x2c\x2b\x95\xcb\x29\x43\x60\xa8\x78\x0a\x6b\xea\x70\x5f\xbd\x50\xd6\xe8\x1a\x35\x17\x7e\xe3\x35\x50\xdf\x57\x00\x24\xef\xa9\x3b\xea\x9c\xe4\x44\x4a\xeb\xa0\x34\x95\x74\xa1\x21\x93\xd2\xa2\xa3\x77\xb0\xae\xcc\x51\x46\xdd\x71\x74\xe0\x13\x21\xf7\xa4\x1b\xed\x06\xe7\x84\xce\x65\x95\xdb\x76\x61\x76\x43\xae\x19\x29\xf2\x2b\x0d\x51\x86\x50\xcc\x90\x76\x83\x01\xf9\x04\x17\xbc\x7d\x17\xdb\x5b\xf6\xa3\x43\x1b\x7c\x94\xaf\xb1\xae\xd0\xc9\x97\xde\x51\xa3\x37\x62\x07\x63\x41\x3b\xf9\x98\x74\x6a\x1a\x95\xf7\x48\xdf\x23\x7a\xc4\x46\x17\x4e\x63\x8b\xfa\x1d\xc2\xc4\xdb\xe9\x98\xfb\x6f\xba\xd9\x14\xeb\xa6\xe2\x84\xf0\x2f\xbe\x67\xab\x15\x5d\x1a\xe1\x18\x16\x42\xab\xaa\x12\xbc\x3c\x43\x8f\x7a\x01\xc7\x30\xa5\x66\x81\x56\x42\x08\xe6\xd2\xe4\x18\xee\xee\x86\xe7\xfd\xef\x2f\x5f\x98\x40\xd8\x59\x4b\xee\xe3\xe0\xb8\x0b\xed\x54\xa8\xa7\x69\xec\xa3\xee\xee\x86\x63\xfe\xfa\xf2\x05\xd2\x94\x9e\x44\xaa\x24\xad\x4e\x85\x9b\x5f\xc8\x88\x42\xd9\x87\xf1\x63\xe0\xfe\xf2\xe5\x20\x0c\x0f\x52\x7e\xc5\x29\xb5\xdc\x2c\x0e\x35\xd3\xf7\x29\x63\x7c\x0b\x9d\x31\x93\x19\x6e\x8d\x1f\xa6\x33\xad\x67\x3a\x57\x9a\xb6\x92\xb7\xde\x0a\xed\x0a\xb4\xb7\x05\xd7\x01\xc7\xf0\xcf\xf3\x09\xef\x2f\x4b\xd4\xb7\xde\xac\x09\x7a\xe0\x0f\x57\xb7\xe7\xff\xb8\x98\xde\x7e\xb8\xb9\x3d\xff\xfb\xc5\x78\xca\xe4\x77\x77\xaa\x00\x8d\x30\xa4\x52\x0a\x0e\x21\x8d\xb7\xbb\xbb\x6b\xac\xd2\xbe\x80\x3d\x8b\xbf\xb5\xe8\xfc\x6d\x4e\x04\xc7\xf0\x83\xdc\x0b\xc4\x3d\x61\x0a\xa8\x65\xff\x2b\xc2\x71\xb9\x45\x75\xd3\x37\x10\x6b\xac\x29\x71\x1e\xc3\x0f\xc3\xc3\x02\xde\x9c\xee\xc5\x63\xdf\x46\x0e\x35\xd9\x23\xd0\x92\x6a\xbb\x4d\xe0\x70\xea\x2b\x64\xfe\xf9\x5b\x8b\xd4\x67\x5e\x9f\x4e\x76\xf9\xdd\xfe\xff\x65\x4a\x1f\x64\xc2\x95\xe1\xe7\xf5\xe9\x04\xd2\x2b\x32\x13\xb7\x19\x9d\x7c\x61\xdd\x3c\x66\xbe\x40\x86\x8f\x79\xc3\xe3\x66\x09\x40\x55\x48\x15\xc7\x47\xa3\xa6\xd1\xc7\xcf\x60\x9b\x0e\xb6\xc6\xfa\x98\xb4\x37\xcb\x9e\xc1\x2a\x1d\x28\xf9\xea\x1a\xf5\x5b\x26\xb9\xf7\x6c\xff\xcb\x67\x9a\xbc\xb1\x4a\x9e\xf3\xe4\xee\x29\x96\x7d\xb1\xd3\xae\x2f\x9e\x62\xd5\x17\x4f\xb0\x29\x11\xf5\xf6\x7a\xaa\x95\x5f\x40\xda\x20\xd4\x8d\x7a\x8e\x87\x17\x24\x28\x6f\x17\x9d\x75\xdf\x3c\x87\x71\x23\x68\x41\xd5\x77\x8f\xfa\x27\x18\x77\x52\xb5\xb6\xde\x6d\xd7\x83\x6d\xc3\x4e\x4e\x4f\xa6\xe3\xb7\x90\xa6\xbf\x9a\x2c\xe5\x34\xfd\x95\x95\x7b\x12\x1d\x26\x2a\x47\xf7\x96\x43\x14\x7f\xcc\xc2\x3d\x79\x0c\xba\x8f\xb8\xcd\x13\xec\xdf\x23\x52\xf8\x4d\x1b\xb4\xac\x8b\x67\x71\x86\x1e\xba\xc6\x9a\x23\xe5\xb3\x44\xe0\x35\xac\xaf\x9b\x35\xec\x9f\xe0\x0f\x5c\x90\x9f\x0a\x9f\x97\x20\xd1\xe5\x56\x65\xe8\x36\xc6\xa3\xdd\xd4\xa1\x2b\xf9\xa8\x7a\x0f\xd4\xf7\x67\x7a\x49\x87\x13\xaa\xc7\xbf\x9a\x2c\x8c\x35\xf8\x78\x2e\x34\xd5\xaa\xa8\x7c\x89\x3c\xae\xe2\x91\x75\x84\xac\xc5\xef\x46\xf7\xc3\x0b\xb8\xa2\xbd\x97\x27\x37\x57\xaf\xa8\xdc\xdb\xc2\x19\xc1\x5e\xf4\x07\xf2\x49\x89\xc5\x5e\xc7\xeb\x6f\x94\x8d\xfe\x18\x1b\x86\xd8\xe6\xc0\x39\x6e\xef\x5e\xcb\xd3\xb5\x10\xae\xc1\x5c\x15\x0a\x25\xfc\x6a\xb2\x90\x0e\xc3\xcc\xdc\xc4\x01\x03\x53\xd1\x9e\x5c\x2b\x42\x7d\xd5\x31\xad\x7b\xa3\xcd\x0e\xe8\x3b\x54\xa2\x13\x6f\xac\x98\xe1\x77\x28\x40\xf7\xff\x40\x97\xf2\x50\x8f\x92\xec\xc3\x25\x75\x10\x9c\xfe\xc0\xad\x9c\xc7\x7a\x98\xf0\x52\xbc\x48\xf0\xb3\x4f\xa5\xf2\x58\x29\xe7\xc9\x2c\xdc\x73\x6c\x4c\x17\x1a\xe1\x4b\x07\xcb\x52\xe5\x65\x37\x51\x51\x0e\x44\x55\x99\x25\xca\xd8\x85\xa1\x0b\xbd\x4b\x58\x3c\x53\xeb\x0e\x61\x78\x40\x52\xbc\x9d\x4e\xaf\x23\xc7\x7e\xbc\xed\x0d\x4f\x1c\x2b\x23\x24\x34\x6d\x56\xa9\x1c\x42\x45\x69\x74\xff\x2f\x93\x85\x12\x20\xe0\xcd\xf9\x14\x62\x79\x35\x4c\x36\xa0\x82\xf0\x71\xb4\xc8\xaf\x8b\x9a\xce\x97\xee\xd5\xe6\x09\xf7\xd0\xe0\x67\xd7\x88\xf6\xde\x68\x3e\xb8\xfb\xe4\xf5\x68\xfd\x3f\x02\xd9\x4d\x49\xc2\x8c\x05\xa1\x8e\x73\x21\xdd\xd6\x19\x5a\xf6\x6b\x55\x77\xa3\x16\xd1\x49\xd1\xdb\xd0\xa2\xb7\x2a\x0e\xf7\x0b\xa1\xaa\xd6\x86\xa1\xd0\x7b\xf1\xf9\x86\xb7\x5c\x3f\x24\x7f\x8e\x21\x00\xf5\x4e\x21\x04\x21\x77\x82\x64\x80\xee\x1f\x7d\x2c\xc3\xe4\x35\x34\xd6\x2c\x94\x44\xeb\xc0\xb5\x79\x09\xc2\xc1\x7b\xa5\x95\xe9\x26\x35\x63\x6c\x4a\x6a\xdb\x51\xa3\x55\x39\x29\x63\x9f\x2d\xbb\x56\x08\xff\xb3\x84\x16\x01\xce\xb5\x6c\x8c\xd2\x81\x7b\x58\xea\x44\x0e\xbf\x36\x85\x0b\x93\x80\x0d\x63\xee\xd2\xf1\xff\x6e\xaf\x9f\x4c\x96\xaa\xf0\xbb\xe5\xa6\x6e\xfa\xea\x81\x6e\x1a\xe0\xa4\xf5\x25\x0f\x49\x42\xff\x8c\x5a\x68\xbf\x41\x1d\x16\xe2\x78\xbf\x8b\x74\xfd\xfe\xbf\x03\x00\x00\xff\xff\x7f\x30\xbc\x85\xec\x1e\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 7916, mode: os.FileMode(420), modTime: time.Unix(1515023003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1513901451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1513901451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1513901451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1513901451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
