// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	Metadata
	Outputs
	SystemLog
	Event
	CreateEventResponse
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tes "github.com/ohsu-comp-bio/funnel/proto/tes"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_UNKNOWN             Type = 0
	Type_TASK_STATE          Type = 1
	Type_TASK_START_TIME     Type = 2
	Type_TASK_END_TIME       Type = 3
	Type_TASK_OUTPUTS        Type = 4
	Type_TASK_METADATA       Type = 5
	Type_EXECUTOR_START_TIME Type = 6
	Type_EXECUTOR_END_TIME   Type = 7
	Type_EXECUTOR_EXIT_CODE  Type = 8
	Type_EXECUTOR_STDOUT     Type = 11
	Type_EXECUTOR_STDERR     Type = 12
	Type_SYSTEM_LOG          Type = 13
)

var Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "TASK_STATE",
	2:  "TASK_START_TIME",
	3:  "TASK_END_TIME",
	4:  "TASK_OUTPUTS",
	5:  "TASK_METADATA",
	6:  "EXECUTOR_START_TIME",
	7:  "EXECUTOR_END_TIME",
	8:  "EXECUTOR_EXIT_CODE",
	11: "EXECUTOR_STDOUT",
	12: "EXECUTOR_STDERR",
	13: "SYSTEM_LOG",
}
var Type_value = map[string]int32{
	"UNKNOWN":             0,
	"TASK_STATE":          1,
	"TASK_START_TIME":     2,
	"TASK_END_TIME":       3,
	"TASK_OUTPUTS":        4,
	"TASK_METADATA":       5,
	"EXECUTOR_START_TIME": 6,
	"EXECUTOR_END_TIME":   7,
	"EXECUTOR_EXIT_CODE":  8,
	"EXECUTOR_STDOUT":     11,
	"EXECUTOR_STDERR":     12,
	"SYSTEM_LOG":          13,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Metadata struct {
	Value map[string]string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metadata) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Outputs struct {
	Value []*tes.OutputFileLog `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Outputs) Reset()                    { *m = Outputs{} }
func (m *Outputs) String() string            { return proto.CompactTextString(m) }
func (*Outputs) ProtoMessage()               {}
func (*Outputs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Outputs) GetValue() []*tes.OutputFileLog {
	if m != nil {
		return m.Value
	}
	return nil
}

type SystemLog struct {
	Msg    string            `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Level  string            `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	Fields map[string]string `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SystemLog) Reset()                    { *m = SystemLog{} }
func (m *SystemLog) String() string            { return proto.CompactTextString(m) }
func (*SystemLog) ProtoMessage()               {}
func (*SystemLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SystemLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SystemLog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *SystemLog) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Event struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Event_State
	//	*Event_StartTime
	//	*Event_EndTime
	//	*Event_Outputs
	//	*Event_Metadata
	//	*Event_ExitCode
	//	*Event_Stdout
	//	*Event_Stderr
	//	*Event_SystemLog
	Data    isEvent_Data `protobuf_oneof:"data"`
	Attempt uint32       `protobuf:"varint,16,opt,name=attempt" json:"attempt,omitempty"`
	Index   uint32       `protobuf:"varint,17,opt,name=index" json:"index,omitempty"`
	Type    Type         `protobuf:"varint,18,opt,name=type,enum=events.Type" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isEvent_Data interface {
	isEvent_Data()
}

type Event_State struct {
	State tes.State `protobuf:"varint,3,opt,name=state,enum=tes.State,oneof"`
}
type Event_StartTime struct {
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,oneof"`
}
type Event_EndTime struct {
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,oneof"`
}
type Event_Outputs struct {
	Outputs *Outputs `protobuf:"bytes,6,opt,name=outputs,oneof"`
}
type Event_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,7,opt,name=metadata,oneof"`
}
type Event_ExitCode struct {
	ExitCode int32 `protobuf:"varint,10,opt,name=exit_code,json=exitCode,oneof"`
}
type Event_Stdout struct {
	Stdout string `protobuf:"bytes,13,opt,name=stdout,oneof"`
}
type Event_Stderr struct {
	Stderr string `protobuf:"bytes,14,opt,name=stderr,oneof"`
}
type Event_SystemLog struct {
	SystemLog *SystemLog `protobuf:"bytes,15,opt,name=system_log,json=systemLog,oneof"`
}

func (*Event_State) isEvent_Data()     {}
func (*Event_StartTime) isEvent_Data() {}
func (*Event_EndTime) isEvent_Data()   {}
func (*Event_Outputs) isEvent_Data()   {}
func (*Event_Metadata) isEvent_Data()  {}
func (*Event_ExitCode) isEvent_Data()  {}
func (*Event_Stdout) isEvent_Data()    {}
func (*Event_Stderr) isEvent_Data()    {}
func (*Event_SystemLog) isEvent_Data() {}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Event) GetState() tes.State {
	if x, ok := m.GetData().(*Event_State); ok {
		return x.State
	}
	return tes.State_UNKNOWN
}

func (m *Event) GetStartTime() string {
	if x, ok := m.GetData().(*Event_StartTime); ok {
		return x.StartTime
	}
	return ""
}

func (m *Event) GetEndTime() string {
	if x, ok := m.GetData().(*Event_EndTime); ok {
		return x.EndTime
	}
	return ""
}

func (m *Event) GetOutputs() *Outputs {
	if x, ok := m.GetData().(*Event_Outputs); ok {
		return x.Outputs
	}
	return nil
}

func (m *Event) GetMetadata() *Metadata {
	if x, ok := m.GetData().(*Event_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *Event) GetExitCode() int32 {
	if x, ok := m.GetData().(*Event_ExitCode); ok {
		return x.ExitCode
	}
	return 0
}

func (m *Event) GetStdout() string {
	if x, ok := m.GetData().(*Event_Stdout); ok {
		return x.Stdout
	}
	return ""
}

func (m *Event) GetStderr() string {
	if x, ok := m.GetData().(*Event_Stderr); ok {
		return x.Stderr
	}
	return ""
}

func (m *Event) GetSystemLog() *SystemLog {
	if x, ok := m.GetData().(*Event_SystemLog); ok {
		return x.SystemLog
	}
	return nil
}

func (m *Event) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *Event) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNKNOWN
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_State)(nil),
		(*Event_StartTime)(nil),
		(*Event_EndTime)(nil),
		(*Event_Outputs)(nil),
		(*Event_Metadata)(nil),
		(*Event_ExitCode)(nil),
		(*Event_Stdout)(nil),
		(*Event_Stderr)(nil),
		(*Event_SystemLog)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// data
	switch x := m.Data.(type) {
	case *Event_State:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.State))
	case *Event_StartTime:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StartTime)
	case *Event_EndTime:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.EndTime)
	case *Event_Outputs:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Outputs); err != nil {
			return err
		}
	case *Event_Metadata:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Metadata); err != nil {
			return err
		}
	case *Event_ExitCode:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ExitCode))
	case *Event_Stdout:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Stdout)
	case *Event_Stderr:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Stderr)
	case *Event_SystemLog:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemLog); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Data has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 3: // data.state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Event_State{tes.State(x)}
		return true, err
	case 4: // data.start_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Event_StartTime{x}
		return true, err
	case 5: // data.end_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Event_EndTime{x}
		return true, err
	case 6: // data.outputs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Outputs)
		err := b.DecodeMessage(msg)
		m.Data = &Event_Outputs{msg}
		return true, err
	case 7: // data.metadata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Metadata)
		err := b.DecodeMessage(msg)
		m.Data = &Event_Metadata{msg}
		return true, err
	case 10: // data.exit_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Event_ExitCode{int32(x)}
		return true, err
	case 13: // data.stdout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Event_Stdout{x}
		return true, err
	case 14: // data.stderr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Event_Stderr{x}
		return true, err
	case 15: // data.system_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemLog)
		err := b.DecodeMessage(msg)
		m.Data = &Event_SystemLog{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// data
	switch x := m.Data.(type) {
	case *Event_State:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.State))
	case *Event_StartTime:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StartTime)))
		n += len(x.StartTime)
	case *Event_EndTime:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EndTime)))
		n += len(x.EndTime)
	case *Event_Outputs:
		s := proto.Size(x.Outputs)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Metadata:
		s := proto.Size(x.Metadata)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ExitCode:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ExitCode))
	case *Event_Stdout:
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stdout)))
		n += len(x.Stdout)
	case *Event_Stderr:
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stderr)))
		n += len(x.Stderr)
	case *Event_SystemLog:
		s := proto.Size(x.SystemLog)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateEventResponse struct {
}

func (m *CreateEventResponse) Reset()                    { *m = CreateEventResponse{} }
func (m *CreateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEventResponse) ProtoMessage()               {}
func (*CreateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Metadata)(nil), "events.Metadata")
	proto.RegisterType((*Outputs)(nil), "events.Outputs")
	proto.RegisterType((*SystemLog)(nil), "events.SystemLog")
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterType((*CreateEventResponse)(nil), "events.CreateEventResponse")
	proto.RegisterEnum("events.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*CreateEventResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := grpc.Invoke(ctx, "/events.EventService/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	CreateEvent(context.Context, *Event) (*CreateEventResponse, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x75, 0xd7, 0xe8, 0x62, 0x6a, 0x5c, 0xb7, 0x0b, 0xd9, 0x46, 0x05, 0x3d, 0x09, 0x2d,
	0x20, 0xa3, 0x32, 0x0a, 0xb8, 0xed, 0x93, 0x2a, 0xd1, 0xb5, 0x61, 0x4b, 0x2a, 0xc8, 0x55, 0xe2,
	0x3c, 0x09, 0x8c, 0x39, 0x11, 0x88, 0x88, 0x17, 0x90, 0x2b, 0xc5, 0xfa, 0xa0, 0x7c, 0x52, 0x7e,
	0x24, 0x5f, 0x10, 0xec, 0x92, 0x94, 0x15, 0x27, 0x2f, 0x79, 0xe3, 0x9c, 0x73, 0xf6, 0xcc, 0xce,
	0x19, 0x62, 0xa1, 0x41, 0x5b, 0xf2, 0x45, 0x3c, 0x08, 0xa3, 0x40, 0x04, 0x58, 0x4e, 0xaa, 0x4e,
	0x4d, 0x50, 0x0a, 0x75, 0xce, 0x56, 0x41, 0xb0, 0x5a, 0xd3, 0x85, 0x1d, 0xba, 0x17, 0xb6, 0xef,
	0x07, 0xc2, 0x16, 0x6e, 0xe0, 0xa7, 0x6c, 0xef, 0x03, 0x54, 0xa7, 0x24, 0x6c, 0xc7, 0x16, 0x36,
	0xfe, 0x01, 0xa5, 0xad, 0xbd, 0xde, 0x10, 0xd3, 0xba, 0x85, 0x7e, 0x7d, 0x78, 0x3a, 0x48, 0xad,
	0x33, 0xc1, 0xe0, 0x95, 0x64, 0x0d, 0x5f, 0x44, 0x3b, 0x33, 0x51, 0x76, 0xae, 0x00, 0x9e, 0x41,
	0xd4, 0xa1, 0xf0, 0x9e, 0x76, 0x4c, 0xeb, 0x6a, 0xfd, 0x9a, 0x29, 0x3f, 0xf1, 0xa7, 0xcc, 0x32,
	0xaf, 0xb0, 0xa4, 0xf8, 0x3b, 0x7f, 0xa5, 0xf5, 0x2e, 0xa1, 0x32, 0xdf, 0x88, 0x70, 0x23, 0x62,
	0xec, 0x7f, 0xdd, 0x17, 0x07, 0xf2, 0xf2, 0x09, 0x79, 0xed, 0xae, 0xe9, 0x3e, 0x58, 0xa5, 0x07,
	0x7b, 0x1f, 0x35, 0xa8, 0x59, 0xbb, 0x58, 0x90, 0x77, 0x1f, 0xac, 0x64, 0x3b, 0x2f, 0x5e, 0x65,
	0xed, 0xbc, 0x78, 0x25, 0xdb, 0xad, 0x69, 0x4b, 0xeb, 0xac, 0x9d, 0x2a, 0xf0, 0x4f, 0x28, 0xbf,
	0x73, 0x69, 0xed, 0xc4, 0xac, 0xa0, 0x1a, 0x9c, 0x67, 0x83, 0xed, 0xad, 0x06, 0xd7, 0x8a, 0x4f,
	0x46, 0x4b, 0xc5, 0x9d, 0xbf, 0xa0, 0x7e, 0x00, 0xff, 0xd0, 0x70, 0x9f, 0x0a, 0x50, 0x32, 0x64,
	0x0f, 0x6c, 0x41, 0xde, 0x75, 0xd2, 0x43, 0x79, 0xd7, 0xc1, 0x33, 0xa8, 0x09, 0xd7, 0xa3, 0x58,
	0xd8, 0x5e, 0x98, 0x9e, 0x7b, 0x06, 0xb0, 0x07, 0xa5, 0x58, 0xd8, 0x82, 0x58, 0xa1, 0xab, 0xf5,
	0x5b, 0x43, 0x50, 0x49, 0x58, 0x12, 0xb9, 0xc9, 0x99, 0x09, 0x85, 0xbf, 0x02, 0xc4, 0xc2, 0x8e,
	0xc4, 0x52, 0x1e, 0x63, 0x45, 0x69, 0x71, 0x93, 0x33, 0x6b, 0x0a, 0xe3, 0xae, 0x47, 0x78, 0x0a,
	0x55, 0xf2, 0x9d, 0x84, 0x2e, 0xa5, 0x74, 0x85, 0x7c, 0x47, 0x91, 0xbf, 0x43, 0x25, 0x48, 0x62,
	0x67, 0xe5, 0xae, 0xd6, 0xaf, 0x0f, 0x8f, 0xb2, 0x30, 0xd2, 0x6d, 0x48, 0x71, 0xaa, 0xc0, 0x01,
	0x54, 0xbd, 0x74, 0xf7, 0xac, 0xa2, 0xd4, 0xfa, 0xcb, 0x7f, 0xe2, 0x26, 0x67, 0xee, 0x35, 0x78,
	0x0e, 0x35, 0x7a, 0x72, 0xc5, 0xf2, 0x31, 0x70, 0x88, 0x41, 0x57, 0xeb, 0x97, 0x24, 0x2d, 0xa1,
	0x71, 0xe0, 0x10, 0x32, 0x28, 0xc7, 0xc2, 0x09, 0x36, 0x82, 0x35, 0xd3, 0x6b, 0xa5, 0x75, 0xca,
	0x50, 0x14, 0xb1, 0xd6, 0x01, 0x43, 0x51, 0x84, 0x43, 0x80, 0x58, 0x6d, 0x69, 0xb9, 0x0e, 0x56,
	0xec, 0x48, 0x5d, 0xa2, 0xfd, 0xcd, 0xfe, 0x54, 0x00, 0xfb, 0xff, 0x82, 0x41, 0xc5, 0x16, 0x82,
	0xbc, 0x50, 0x30, 0xbd, 0xab, 0xf5, 0x9b, 0x66, 0x56, 0xca, 0x8d, 0xb9, 0xbe, 0x43, 0x4f, 0xac,
	0xad, 0xf0, 0xa4, 0xc0, 0x2e, 0x14, 0xc5, 0x2e, 0x24, 0x86, 0x2a, 0xf4, 0x46, 0xe6, 0xce, 0x77,
	0x21, 0x99, 0x8a, 0xf9, 0xb7, 0x0c, 0x45, 0x39, 0x60, 0xef, 0x04, 0x8e, 0xc7, 0x11, 0xd9, 0x82,
	0xd4, 0x72, 0x4d, 0x8a, 0xc3, 0xc0, 0x8f, 0xe9, 0xb7, 0xcf, 0x1a, 0x14, 0xa5, 0x1a, 0xeb, 0x50,
	0x59, 0xcc, 0xee, 0x66, 0xf3, 0xd7, 0x33, 0x3d, 0x87, 0x2d, 0x00, 0x3e, 0xb2, 0xee, 0x96, 0x16,
	0x1f, 0x71, 0x43, 0xd7, 0xf0, 0x18, 0x8e, 0xb2, 0xda, 0xe4, 0x4b, 0x7e, 0x3b, 0x35, 0xf4, 0x3c,
	0xb6, 0xa1, 0xa9, 0x40, 0x63, 0x36, 0x49, 0xa0, 0x02, 0xea, 0xd0, 0x50, 0xd0, 0x7c, 0xc1, 0xff,
	0x5f, 0x70, 0x4b, 0x2f, 0xee, 0x45, 0x53, 0x83, 0x8f, 0x26, 0x23, 0x3e, 0xd2, 0x4b, 0xf8, 0x0b,
	0x1c, 0x1b, 0x0f, 0xc6, 0x78, 0xc1, 0xe7, 0xe6, 0xa1, 0x61, 0x19, 0x4f, 0xa0, 0xbd, 0x27, 0xf6,
	0xa6, 0x15, 0xfc, 0x19, 0xf0, 0x19, 0x7e, 0xb8, 0xe5, 0xcb, 0xf1, 0x7c, 0x62, 0xe8, 0x55, 0x79,
	0xa9, 0x03, 0x9f, 0xc9, 0x7c, 0xc1, 0xf5, 0xfa, 0x4b, 0xd0, 0x30, 0x4d, 0xbd, 0x21, 0xc7, 0xb1,
	0xde, 0x58, 0xdc, 0x98, 0x2e, 0xef, 0xe7, 0xff, 0xe9, 0xcd, 0xe1, 0x1d, 0x34, 0x54, 0x0a, 0x16,
	0x45, 0x5b, 0xf7, 0x91, 0xf0, 0x1f, 0xa8, 0x1f, 0x64, 0x83, 0xcd, 0x2c, 0x46, 0x55, 0x76, 0xf6,
	0x8f, 0xc9, 0x77, 0xf2, 0xeb, 0xe5, 0xde, 0x96, 0xd5, 0x6b, 0x74, 0xf9, 0x25, 0x00, 0x00, 0xff,
	0xff, 0x54, 0xbb, 0x78, 0x97, 0xce, 0x04, 0x00, 0x00,
}
